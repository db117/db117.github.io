import{_ as l,c as t,o as i,j as e,ah as r,a as o}from"./chunks/framework.DgjLIkXe.js";const u=JSON.parse('{"title":"caffeine","description":"","frontmatter":{"title":"caffeine"},"headers":[],"relativePath":"java/other/caffeine.md","filePath":"java/other/caffeine.md"}'),c={name:"java/other/caffeine.md"};function n(f,a,d,s,h,p){return i(),t("div",null,a[0]||(a[0]=[e("blockquote",null,[e("p",null,"一个 Java 缓存工具包"),e("p",null,[e("a",{href:"https://github.com/ben-manes/caffeine",target:"_blank",rel:"noreferrer"},"https://github.com/ben-manes/caffeine")])],-1),e("h2",{id:"流程图",tabindex:"-1"},[o("流程图 "),e("a",{class:"header-anchor",href:"#流程图","aria-label":'Permalink to "流程图"'},"​")],-1),e("iframe",{id:"embed_dom",name:"embed_dom",frameborder:"0",style:{display:"block",width:"725px",height:"300px"},src:"https://www.processon.com/embed/67ff8ff63c3a8606fa5df26d?cid=67ff8ff63c3a8606fa5df270"},null,-1),r('<h2 id="核心" tabindex="-1">核心 <a class="header-anchor" href="#核心" aria-label="Permalink to &quot;核心&quot;">​</a></h2><ul><li>数据使用 ConcurrentHashMap 保存，读取数据直接操作这个 map。</li><li>把数据分成 3 个区，对于 3 个队列。分区变更就是节点在这三个队列中转移。</li><li>每次读取数据后会向<code>读/写缓存</code>中写入数据。</li><li>每次操作后都会调用<code>BoundedLocalCache#maintenance</code><ul><li>处理<code>读/写缓存</code>中的事件</li><li>维护各种队列</li><li>根据驱逐策略驱逐元素</li></ul></li><li><code>FrequencySketch</code>频率草图 <ul><li>它的实现原理和布隆过滤器类似，牺牲了部分准确性，但减少了占用内存的大小</li><li>使用一个long[] 来记录频率，对结点进行 Hash。对对应的 slot 进行操作</li></ul></li></ul><h4 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h4><ul><li><a href="https://mp.weixin.qq.com/s/ppsrcOK00T8OoS9fPpeD8w" target="_blank" rel="noreferrer">https://mp.weixin.qq.com/s/ppsrcOK00T8OoS9fPpeD8w</a></li></ul>',4)]))}const _=l(c,[["render",n]]);export{u as __pageData,_ as default};
