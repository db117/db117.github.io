import{_ as t,c as o,a3 as n,o as a}from"./chunks/framework.CuBk2nsQ.js";const S=JSON.parse('{"title":"Spring event","description":"","frontmatter":{"title":"Spring event"},"headers":[],"relativePath":"java/spring/event.md","filePath":"java/spring/event.md"}'),i={name:"java/spring/event.md"};function c(r,e,d,p,l,s){return a(),o("div",null,e[0]||(e[0]=[n('<blockquote><p>简单说就是通过 <code>BeanFactoryPostProcessor</code> 添加 <code>EventListenerFactory</code>，然后在<code>spring</code>所有单例非延迟加载的 Bean 都实例化完后</p><p>通过<code>SmartInitializingSingleton#afterSingletonsInstantiated</code>找到所有有<code>@EventListener</code>的方法，创建监听器并添加到容器中。</p></blockquote><hr><h3 id="transactionaleventlistener-实现" tabindex="-1">@TransactionalEventListener 实现 <a class="header-anchor" href="#transactionaleventlistener-实现" aria-label="Permalink to &quot;@TransactionalEventListener 实现&quot;">​</a></h3><blockquote><p>整体流程和<code>@EventListener</code>一致，只是使用<code>TransactionalEventListenerFactory</code>来创建<code>TransactionalApplicationListenerMethodAdapter</code>。</p><p>在处理事件时，会通过<code>TransactionSynchronizationManager</code>注册<code>TransactionalApplicationListenerSynchronization</code>。在特定情况下执行注解所在的方法。</p></blockquote><hr><h3 id="常见事件" tabindex="-1">常见事件 <a class="header-anchor" href="#常见事件" aria-label="Permalink to &quot;常见事件&quot;">​</a></h3><ul><li><p><code>ContextRefreshedEvent</code>: 当<code>ApplicationContext</code>被初始化或刷新时发送，即当应用程序上下文被完全初始化并可以使用时。</p></li><li><p><code>ContextStartedEvent</code>: 当<code>ApplicationContext</code>被启动时发送，即当应用程序上下文开始执行时。</p></li><li><p><code>ContextStoppedEvent</code>: 当<code>ApplicationContext</code>被停止时发送，即当应用程序上下文停止执行时。</p></li><li><p><code>ContextClosedEvent</code>: 当<code>ApplicationContext</code>被关闭时发送，即当应用程序上下文被销毁时。</p></li><li><p><code>RequestHandledEvent</code>: 当HTTP请求被处理完毕后发送，即当HTTP请求处理完成并响应发送回客户端时。</p></li><li><p><code>ApplicationStartedEvent</code>: 当Spring Boot应用程序启动时发送，即当Spring Boot启动并准备好接受请求时。</p></li><li><p><code>ApplicationReadyEvent</code>: 当Spring Boot应用程序准备好接受请求时发送，即当Spring Boot启动并应用程序上下文已准备好接受请求时。</p></li><li><p><code>ApplicationStoppedEvent</code>: 当Spring Boot应用程序停止时发送，即当Spring Boot应用程序停止运行时。</p></li></ul>',7)]))}const h=t(i,[["render",c]]);export{S as __pageData,h as default};
