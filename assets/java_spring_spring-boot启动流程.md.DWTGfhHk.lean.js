import{_ as o,c as n,a3 as e,o as l}from"./chunks/framework.D7KqzdP6.js";const g=JSON.parse('{"title":"spring-boot启动流程","description":"","frontmatter":{"title":"spring-boot启动流程"},"headers":[],"relativePath":"java/spring/spring-boot启动流程.md","filePath":"java/spring/spring-boot启动流程.md"}'),t={name:"java/spring/spring-boot启动流程.md"};function a(r,i,p,d,c,s){return l(),n("div",null,i[0]||(i[0]=[e('<p><strong>EnableAutoConfiguration</strong></p><p>核心注解，开启自动装配。通过<code>org.springframework.context.annotation.Import</code>注入 <code>org.springframework.boot.autoconfigure.AutoConfigurationImportSelector</code>，该类实现了 <code>DeferredImportSelectorSpring</code></p><p>会在spring解析 <code>@import</code>是调用 <code>getAutoConfigurationEntry</code></p><p><strong>AutoConfigurationImportSelector</strong></p><p>通过 <code>org.springframework.boot.autoconfigure.AutoConfigurationImportSelector#getCandidateConfigurations</code></p><p>获取 <code>META-INF/spring.factories</code>中定义的类。改接口会在spring初始化是进行装载。</p><p><strong>关闭</strong></p><p>通知设置 <code>spring.boot.enableautoconfiguration=true</code>来关闭自动配置</p><h3 id="注解" tabindex="-1">注解 <a class="header-anchor" href="#注解" aria-label="Permalink to &quot;注解&quot;">​</a></h3><p><strong>@Configuration(proxyBeanMethods = false)</strong></p><p>标记了@Configuration Spring底层会给配置创建cglib动态代理。 作用：就是防止每次调用本类的Bean方法而重新创建对 象，Bean是默认单例的</p><p><strong>@Conditional派生注解（Spring注解版原生的@Conditional作用）</strong></p><ul><li>@ConditionalOnJava <ul><li>系统的java版本是否符合要求</li></ul></li><li>@ConditionalOnBean <ul><li>容器中存在指定Bean</li></ul></li><li>@ConditionalOnMissingBean <ul><li>容器中不存在指定Bean</li></ul></li><li>@ConditionalOnExpression <ul><li>满足SpEL表达式指定</li></ul></li><li>@ConditionalOnClass</li><li>系统中有指定的类</li><li>@ConditionalOnMissingClass</li><li>系统中没有指定的类</li><li>@ConditionalOnSingleCandidate <ul><li>容器中只有一个指定的Bean，或者这个Bean是首选Bean</li></ul></li><li>@ConditionalOnProperty <ul><li>系统中指定的属性是否有指定的值</li></ul></li><li>@ConditionalOnResource <ul><li>类路径下是否存在指定资源文件</li></ul></li><li>@ConditionalOnWebApplication <ul><li>当前是web环境</li></ul></li><li>@ConditionalOnNotWebApplication <ul><li>当前不是web环境</li></ul></li><li>@ConditionalOnJndi</li><li>JNDI存在指定项</li><li>EnableConfigurationProperties <ul><li>将配置文件的值和对象绑定起来，并注册到ioc容器中</li></ul></li></ul><h3 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h3><blockquote><p>在springBoot启动中各个阶段发布不同的事件。</p></blockquote><ol><li><p><code>ApplicationStartingEvent</code>在运行开始时发送，但在进行任何处理之前（侦听器和初始化程序的注册除外）发送。</p></li><li><p>在创建上下文之前，将发送<code>ApplicationEnvironmentPreparedEvent</code>。</p></li><li><p>准备ApplicationContext并调用<code>ApplicationContextInitializers</code>之后，将发送<code>ApplicationContextInitializedEvent</code>。</p></li><li><p>读取完配置类后发送<code>ApplicationPreparedEvent</code>。</p></li><li><p>在刷新上下文之后但在调用<code>ApplicationRunner</code>和<code>CommandLineRunner</code>之前，将发送<code>ApplicationStartedEvent</code>。</p></li><li><p>紧随其后发送带有LivenessState.CORRECT的<code>AvailabilityChangeEvent</code>，以指示该应用程序被视为处于活动状态。</p></li><li><p>在调用任何应用程序和命令行运行程序之后，将发送<code>ApplicationReadyEvent</code>。</p></li><li><p>紧随其后发送ReadabilityState.ACCEPTING_TRAFFIC的<code>AvailabilityChangeEvent</code>，以指示应用程序已准备就绪，可以 处理请求。</p></li><li><p>如果启动时发生异常，则发送<code>ApplicationFailedEvent</code>。</p></li></ol>',16)]))}const C=o(t,[["render",a]]);export{g as __pageData,C as default};
