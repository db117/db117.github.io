import{_ as n,c as a,o as p,ah as l}from"./chunks/framework.1mMYEF3_.js";const d=JSON.parse('{"title":"Reactor","description":"","frontmatter":{"title":"Reactor"},"headers":[],"relativePath":"java/util/reactor.md","filePath":"java/util/reactor.md"}'),e={name:"java/util/reactor.md"};function t(i,s,c,r,o,u){return p(),a("div",null,[...s[0]||(s[0]=[l(`<blockquote><p><a href="https://projectreactor.io/" target="_blank" rel="noreferrer">https://projectreactor.io/</a></p><p><a href="https://github.com/reactor" target="_blank" rel="noreferrer">https://github.com/reactor</a></p></blockquote><h3 id="创建序列" tabindex="-1">创建序列 <a class="header-anchor" href="#创建序列" aria-label="Permalink to &quot;创建序列&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 生成固定的序列</span></span>
<span class="line"><span>Flux.just(1, 2, 3);</span></span>
<span class="line"><span>Flux.range(1, 12);</span></span>
<span class="line"><span>Flux.from();</span></span>
<span class="line"><span>Flux.fromArray();</span></span>
<span class="line"><span>Flux.fromStream();</span></span>
<span class="line"><span>Flux.fromIterable();</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 从 1 生成到 10</span></span>
<span class="line"><span>Flux.&lt;Integer, Integer&gt;generate(() -&gt; 1, (s, o) -&gt; {</span></span>
<span class="line"><span>			if (s &lt; 11) {</span></span>
<span class="line"><span>				o.next(s);</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>			else {</span></span>
<span class="line"><span>				o.complete();</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>			return s + 1;</span></span>
<span class="line"><span>		});</span></span>
<span class="line"><span>		</span></span>
<span class="line"><span># 按照时间间隔生成</span></span>
<span class="line"><span>Flux.interval(Duration.ofMillis(100), Duration.ofMillis(100), Schedulers.newSingle(&quot;interval-test&quot;))</span></span>
<span class="line"><span>      .take(5, false)</span></span>
<span class="line"><span>      .map(v -&gt; System.currentTimeMillis())</span></span>
<span class="line"><span>      .subscribe(ts);</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 通过回到方法生成</span></span>
<span class="line"><span>Flux.create(sink -&gt; {</span></span>
<span class="line"><span>			    sink.next(&quot;1&quot;);</span></span>
<span class="line"><span>			    sink.next(&quot;2&quot;);</span></span>
<span class="line"><span>			    sink.complete();</span></span>
<span class="line"><span>		    });</span></span></code></pre></div><h3 id="改变序列" tabindex="-1">改变序列 <a class="header-anchor" href="#改变序列" aria-label="Permalink to &quot;改变序列&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 1 变 1</span></span>
<span class="line"><span># 直接转换对象</span></span>
<span class="line"><span>Flux.map();</span></span>
<span class="line"><span># 强转转换对象，如果不能转就报错</span></span>
<span class="line"><span>Flux.cast();</span></span>
<span class="line"><span># 给每一个数据添加一个索引</span></span>
<span class="line"><span>Flux.index();</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 1 变 多</span></span>
<span class="line"><span># 把一个元素变成另一个元素序列</span></span>
<span class="line"><span>Flux.flatMap();flatMapSequential </span></span>
<span class="line"><span># 把一个元素变成另一个元素序列（按照顺序来）</span></span>
<span class="line"><span>Flux.flatMapSequential(); </span></span>
<span class="line"><span># 直接消费元素以及一个SynchronousSink。可以做各种操作</span></span>
<span class="line"><span>Flux.handle();</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span># 拼接序列</span></span>
<span class="line"><span># 把一个序列加到当前序列前面</span></span>
<span class="line"><span>Flux.startWith();</span></span>
<span class="line"><span># 把一个序列加到当前序列后面</span></span>
<span class="line"><span>Flux.concatWithValues();</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 聚合序列</span></span></code></pre></div>`,5)])])}const m=n(e,[["render",t]]);export{d as __pageData,m as default};
