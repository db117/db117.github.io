import{_ as i,c as a,o as e,ah as n}from"./chunks/framework.1mMYEF3_.js";const h=JSON.parse('{"title":"JMH基准测试","description":"","frontmatter":{"title":"JMH基准测试"},"headers":[],"relativePath":"java/util/JMH.md","filePath":"java/util/JMH.md"}'),t={name:"java/util/JMH.md"};function r(s,l,o,u,p,c){return e(),a("div",null,[...l[0]||(l[0]=[n(`<h3 id="jmh基准测试" tabindex="-1">JMH基准测试 <a class="header-anchor" href="#jmh基准测试" aria-label="Permalink to &quot;JMH基准测试&quot;">​</a></h3><h4 id="_1-简介" tabindex="-1">1.简介 <a class="header-anchor" href="#_1-简介" aria-label="Permalink to &quot;1.简介&quot;">​</a></h4><p>JMH，即Java Microbenchmark Harness，是专门用于代码微基准测试的工具套件。主要是基于方法层面的基准测试，精度可以达到纳秒级。当你定位到热点方法，希望进一步优化方法性能的时候，就可以使用JMH对优化的结果进行量化的分析。</p><p><a href="http://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="noreferrer">官方网站</a></p><blockquote><p>JMH 实现了JSR269规范，即注解处理器，能在编译Java源码的时候，识别的到需要处理的注解，如@Beanmark，JMH能根据@Beanmark的配置生成一系列测试辅助类</p></blockquote><h4 id="_2-maven依赖" tabindex="-1">2.maven依赖 <a class="header-anchor" href="#_2-maven依赖" aria-label="Permalink to &quot;2.maven依赖&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.openjdk.jmh&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;jmh-core&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;[1.23,]&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span>
<span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;org.openjdk.jmh&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;jmh-generator-annprocess&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;[1.23,]&lt;/version&gt;</span></span>
<span class="line"><span>    &lt;scope&gt;provided&lt;/scope&gt;</span></span></code></pre></div><h4 id="_3-注解" tabindex="-1">3.注解 <a class="header-anchor" href="#_3-注解" aria-label="Permalink to &quot;3.注解&quot;">​</a></h4><ul><li>@Benchmark <ul><li>方法级注解，表示该方法是需要进行 benchmark 的对象，用法和 JUnit 的 @Test 类似</li></ul></li><li>@BenchmarkMode <ul><li>Throughput: 整体吞吐量，例如“1秒内可以执行多少次调用”。</li><li>AverageTime: 调用的平均时间，例如“每次调用平均耗时xxx毫秒”。</li><li>SampleTime: 随机取样，最后输出取样结果的分布，例如“99%的调用在xxx毫秒以内，99.99%的调用在xxx毫秒以内”</li><li>SingleShotTime: 只运行一次。往往同时把 warmup 次数设为0，用于测试冷启动时的性能。</li><li>All：所有模式</li><li>默认Throughput, ops/time</li></ul></li><li>@Warmup <ul><li>iterations：预热的次数。</li><li>time：每次预热的时间。</li><li>timeUnit：时间的单位，默认秒。</li><li>batchSize：批处理大小，每次操作调用几次方法。</li><li>默认 5次，每次10秒</li></ul></li><li>@Measurement <ul><li>iterations 进行测试的轮次</li><li>time 每轮进行的时长</li><li>timeUnit 时长单位</li><li>默认 5次，每次10秒</li></ul></li><li>@Timeout <ul><li>超时时间，每次运行的时间不能超过设定的时间</li><li>默认10分钟</li></ul></li><li>@Fork <ul><li>value：几个分叉，运行几次，默认5次</li><li>warmups：预热次数，默认0次</li><li>jvm：运行的jvm，默认当前jvm</li><li>jvmArgs：jvm运行main参数，没人当前main入参</li></ul></li><li>@OutputTimeUnit <ul><li>基准测试结果的时间类型</li></ul></li><li>@Param <ul><li>属性级注解，@Param 可以用来指定某项参数的多种情况。特别适合用来测试一个函数在不同的参数输入的情况下的性能。</li></ul></li><li>@Setup <ul><li>方法级注解，这个注解的作用就是我们需要在测试之前进行一些准备工作，比如对一些数据的初始化之类的。</li><li>Trial：在每次Benchmark的之前执行。</li><li>Iteration：在每次Benchmark的iteration的之前执行。</li><li>Invocation：每次调用Benchmark标记的方法之前都会执行。</li><li>类似于junit的@Before</li><li>使用该注解必须定义 @State注解。</li></ul></li><li>@TearDown <ul><li>方法级注解，这个注解的作用就是我们需要在测试之后进行一些结束工作，比如关闭线程池，数据库连接等的，主要用于资源的回收等。</li><li>Trial：在每次Benchmark的之后执行。</li><li>Iteration：在每次Benchmark的iteration的之后执行。</li><li>Invocation：每次调用Benchmark标记的方法之后都会执行。</li><li>类似于junit的@After</li><li>使用该注解必须定义 @State注解。</li></ul></li><li>@State <ul><li>当使用@Setup参数的时候，必须在类上加这个参数，不然会提示无法运行。</li><li>Thread: 该状态为每个线程独享。</li><li>Group: 该状态为同一个组里面所有线程共享。</li><li>Benchmark: 该状态在所有线程间共享。</li></ul></li><li>@Group <ul><li>结合@Benchmark一起使用，把多个基准方法归为一类，只能作用在<strong>方法</strong>上。</li><li>同一个组中的所有测试设置相同的名称(否则这些测试将独立运行——没有任何警告提示！)</li></ul></li><li>@GroupThreads <ul><li>定义了多少个线程参与在组中运行基准方法。只能作用在<strong>方法</strong>上。</li></ul></li><li>@CompilerControl <ul><li>DONT_INLINE：强制跳过内联</li><li>INLINE：强制内联</li><li>BREAK：插入一个调试断点</li><li>PRINT：打印方法被JIT编译后的机器码信息</li><li>EXCLUDE：从编译中排除该方法</li><li>COMPILE_ONLY：只编译此方法，不编译其他方法</li></ul></li></ul><h4 id="_4-注意事项" tabindex="-1">4.注意事项 <a class="header-anchor" href="#_4-注意事项" aria-label="Permalink to &quot;4.注意事项&quot;">​</a></h4><ul><li>ERROR: org.openjdk.jmh.runner.RunnerException: ERROR: Exception while trying to acquire the JMH lock (C:\\WINDOWS/jmh.lock): 拒绝访问。, exiting. Use -Djmh.ignoreLock=true to forcefully continue. <ul><li>这个错误是因为JMH运行需要访问系统的TMP目录，解决办法是： 打开Run Configuration -&gt; Environment Variables -&gt; include system environment viables(勾选)</li></ul></li><li>JMH plugin <ul><li>idea的jmh插件，注解直接执行</li></ul></li><li>避免JIT优化 <ul><li>基准测试方法一定不要返回void。</li><li>如果要使用void返回，可以使用 <code>Blackhole</code> 的 <code>consume</code> 来避免JIT的优化消除。</li><li>计算不要引用常量，否则会被优化到JMH的循环之外。</li></ul></li><li>常量折叠（Constant Folding） <ul><li>如果你的计算输入是可预测的，在编译器就计算出常量的计算，会被JIT优化掉</li><li>永远从@State实例中读取你的方法输入；</li><li>返回你的计算结果；</li><li>或者考虑使用BlackHole对象</li></ul></li><li>循环处理 <ul><li>因为编译器可能会将我们的循环进行展开或者做一些其他方面的循环优化，所以JHM建议我们不要在Beanchmark中使用循环</li><li>可以是有@Measurement(batchSize = N)来达到效果</li></ul></li></ul>`,11)])])}const d=i(t,[["render",r]]);export{h as __pageData,d as default};
