import{_ as a,c as p,j as e,a as l,a3 as t,o as r}from"./chunks/framework.B112ehe2.js";const m=JSON.parse('{"title":"MyBatis","description":"","frontmatter":{"title":"MyBatis"},"headers":[],"relativePath":"java/other/MyBatis.md","filePath":"java/other/MyBatis.md"}'),c={name:"java/other/MyBatis.md"};function i(n,o,d,s,u,b){return r(),p("div",null,o[0]||(o[0]=[e("h3",{id:"流程图",tabindex:"-1"},[l("流程图 "),e("a",{class:"header-anchor",href:"#流程图","aria-label":'Permalink to "流程图"'},"​")],-1),e("ul",null,[e("li",null,"MyBatis 整体执行流程图")],-1),e("iframe",{id:"embed_dom",name:"embed_dom",frameborder:"0",style:{display:"block",width:"725px",height:"245px"},src:"https://www.processon.com/embed/6194d85463768938bc8f076e"},null,-1),e("ul",null,[e("li",null,[e("p",null,"MyBatis 整合 Spring 流程图"),e("iframe",{id:"embed_dom",name:"embed_dom",frameborder:"0",style:{display:"block",width:"725px",height:"245px"},src:"https://www.processon.com/embed/6197805563768938bc95b5c1"})])],-1),t(`<h3 id="主要组件" tabindex="-1">主要组件 <a class="header-anchor" href="#主要组件" aria-label="Permalink to &quot;主要组件&quot;">​</a></h3><ul><li><p>Executor</p><blockquote><p>sql执行器接口,主要用于维护一级缓存和二级缓存,并且提供事务管理功能</p></blockquote><ul><li><p>BaseExecutor：一级缓存</p><ul><li><pre><code>     batchExecutor：批量执行器
</code></pre></li><li><pre><code>     ReUseExecutor：可重用的
</code></pre></li><li><pre><code>     SimpleExecutor：简单的
</code></pre></li><li><pre><code>     CacheExecutor：加入了二级缓存
</code></pre></li></ul></li></ul></li><li><p>ParameterHandler</p><blockquote><p>参数处理</p></blockquote></li><li><p>ResultSetHandler</p><blockquote><p>处理返回值</p></blockquote></li><li><p>StatementHandler</p><blockquote><p>处理Statement</p></blockquote></li><li><p>SqlSession</p><blockquote><p>执行sql，通过调用Executor执行</p></blockquote></li><li><p>SqlSessionFactory</p><blockquote><p>获取SqlSession</p></blockquote></li><li><p><strong>Interceptor</strong></p><blockquote><p>拦截器,可以在创建时拦截Executor，ParameterHandler，ResultSetHandler，StatementHandler。</p><p>先通过<code>@Signature</code>进行筛选过滤然后通过 jdk 动态代理，一层层的包装实现装饰器模式。</p></blockquote></li><li><p>MapperProxy</p><blockquote><p>mapper 代理对象的<code>InvocationHandler</code>接口，所有 mapper 实际都走这个类。</p></blockquote></li><li><p>MapperMethod</p><blockquote><p>真正干活的类，通过<code>org.apache.ibatis.binding.MapperMethod#execute</code>来执行数据库操作。</p></blockquote></li><li><p>Configuration</p><blockquote><p>核心配置类，包含几乎所有东西。</p></blockquote></li><li><p>MappedStatement</p><blockquote><p>对应所有 mapper 方法，保存有执行语句，返回值处理器等信息。</p></blockquote></li><li><p>MapperRegistry</p><blockquote><p>注册 mapper，通过<code>org.apache.ibatis.builder.annotation.MapperAnnotationBuilder#parse</code>解析 mapper 接口，通过<code>org.apache.ibatis.builder.annotation.MapperAnnotationBuilder#parseStatement</code>解析各种注解。生成 mapper 代理对象。</p></blockquote></li></ul><h3 id="整合-spring" tabindex="-1">整合 Spring <a class="header-anchor" href="#整合-spring" aria-label="Permalink to &quot;整合 Spring&quot;">​</a></h3><h4 id="主要组件-1" tabindex="-1">主要组件 <a class="header-anchor" href="#主要组件-1" aria-label="Permalink to &quot;主要组件&quot;">​</a></h4><ul><li><p>MapperScannerRegistrar</p><blockquote><p>通过<code>@MapperScans</code>注入，向 Spring 容器中注册<code>MapperScannerConfigurer</code></p></blockquote></li><li><p>MapperScannerConfigurer</p><blockquote><p>通过<code>ClassPathMapperScanner#doScan</code>扫描<code>@MapperScans</code>中设置的包，并向 Spring 容器中注册<code>MapperFactoryBean</code>，并设置其<code>autowireMode</code>为<code>AUTOWIRE_BY_TYPE</code></p></blockquote></li><li><p>MapperFactoryBean</p><blockquote><p>所有 mqpper 都会包装成这个类注入到 Spring 容器中。通过属性<code>mapperInterface</code>执行实际 mapper。通过<code>AUTOWIRE_BY_TYPE</code>在创建是自动注入<code>SqlSessionTemplate</code>。在 Spring 获取对象时通过<code>MapperProxyFactory#newInstance</code>创建代理对象。</p></blockquote></li><li><p>SqlSessionTemplate</p><blockquote><p>通过内部类<code>SqlSessionInterceptor#invoke</code>生成代理对象。适配 Spring 的事务管理。</p></blockquote></li><li><p>SqlSessionFactoryBean</p><blockquote><p>核心配置类，需要自行注入到 spring 容器中。在 Spring 创建对象时，调用<code>SqlSessionFactoryBean#buildSqlSessionFactory加载一系列配置，并配置plugin，TypeHandler,二级缓存等信息，扫描并通过</code>XMLMapperBuilder\`加载所有 mapper</p></blockquote></li></ul><h3 id="小细节" tabindex="-1">小细节 <a class="header-anchor" href="#小细节" aria-label="Permalink to &quot;小细节&quot;">​</a></h3><ul><li>xml 特殊字符，可以使用 <code>&lt;![CDATA[ ]]&gt;</code>包起来</li></ul>`,7)]))}const h=a(c,[["render",i]]);export{m as __pageData,h as default};
