import{_ as i,c as t,a3 as e,o as a}from"./chunks/framework.D7KqzdP6.js";const d=JSON.parse('{"title":"git命令","description":"","frontmatter":{"title":"git命令"},"headers":[],"relativePath":"util/git/git-operation.md","filePath":"util/git/git-operation.md"}'),u={name:"util/git/git-operation.md"};function o(r,l,c,g,m,n){return a(),t("div",null,l[0]||(l[0]=[e(`<h3 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h3><pre><code>Git的设置文件为.gitconfig，它可以在用户主目录下（全局配置），
也可以在项目目录下（项目配置）。
</code></pre><ul><li>显示当前的Git配置 <ul><li>git config --list</li></ul></li><li>编辑Git配置文件 <ul><li>git config -e [--global]</li></ul></li><li>设置提交代码时的用户信息 <ul><li>git config [--global] user.name &quot;[name]&quot;</li><li>git config [--global] user.email &quot;[email address]&quot;</li></ul></li></ul><h3 id="增加-删除-修改文件" tabindex="-1">增加/删除/修改文件 <a class="header-anchor" href="#增加-删除-修改文件" aria-label="Permalink to &quot;增加/删除/修改文件&quot;">​</a></h3><ul><li>查看状态 <ul><li>git status</li></ul></li><li>查看变更内容 <ul><li>git diff</li></ul></li><li>添加指定文件到暂存区 <ul><li>git add [file1] [file2] ...</li></ul></li><li>添加指定目录到暂存区，包括子目录 <ul><li>git add [dir]</li></ul></li><li>添加当前目录的所有文件到暂存区 <ul><li>git add .</li><li>添加每个变化前，都会要求确认</li><li>对于同一个文件的多处变化，可以实现分次提交</li><li>git add -p</li></ul></li><li>删除工作区文件，并且将这次删除放入暂存区 <ul><li>git rm [file1] [file2] ...</li></ul></li><li>停止追踪指定文件，但该文件会保留在工作区 <ul><li>git rm --cached [file]</li></ul></li><li>改名文件，并且将这个改名放入暂存区 <ul><li>git mv [file-original] [file-renamed]</li></ul></li></ul><h3 id="代码提交" tabindex="-1">代码提交 <a class="header-anchor" href="#代码提交" aria-label="Permalink to &quot;代码提交&quot;">​</a></h3><ul><li>提交暂存区到仓库区 <ul><li>git commit -m [message]</li></ul></li><li>提交暂存区的指定文件到仓库区 <ul><li>git commit [file1] [file2] ... -m [message]</li></ul></li><li>提交工作区自上次commit之后的变化，直接到仓库区 <ul><li>git commit -a</li></ul></li><li>提交时显示所有diff信息 <ul><li>git commit -v</li><li>使用一次新的commit，替代上一次提交</li></ul></li><li>如果代码没有任何新变化，则用来改写上一次commit的提交信息 <ul><li>git commit --amend -m [message]</li></ul></li><li>重做上一次commit，并包括指定文件的新变化 <ul><li>git commit --amend [file1] [file2] ...</li></ul></li></ul><h3 id="分支" tabindex="-1">分支 <a class="header-anchor" href="#分支" aria-label="Permalink to &quot;分支&quot;">​</a></h3><ul><li>显示所有本地分支 <ul><li>git branch</li></ul></li><li>列出所有远程分支 * git branch -r</li><li>列出所有本地分支和远程分支 * git branch -a</li><li>新建一个分支，但依然停留在当前分支 * git branch [branch-name]</li><li>新建一个分支，与指定的远程分支建立追踪关系 * git branch --track [branch] [remote-branch]</li><li>删除分支 * git branch -d [branch-name]</li><li>删除远程分支 * git push origin --delete [branch-name] * git branch -dr [remote/branch]</li><li>新建一个分支，并切换到该分支 * git checkout -b [branch]</li><li>切换到指定分支，并更新工作区 * git checkout [branch-name]</li><li>切换到上一个分支 * git checkout -</li><li>建立追踪关系，在现有分支与指定的远程分支之间 * git branch --set-upstream [branch] [remote-branch]</li><li>合并指定分支到当前分支 * git merge [branch]</li><li>衍合指定分支到当前分支 <ul><li><code>git rebase &lt;branch&gt;</code></li></ul></li><li>选择一个commit，合并进当前分支 * git cherry-pick [commit]</li></ul><h3 id="标签" tabindex="-1">标签 <a class="header-anchor" href="#标签" aria-label="Permalink to &quot;标签&quot;">​</a></h3><ul><li>列出所有本地标签 <ul><li>git tag</li></ul></li><li>基于最新提交创建标签 <ul><li><code>git tag &lt;tagname&gt;</code></li></ul></li><li>删除标签 <ul><li><code>git tag -d &lt;tagname&gt;</code></li></ul></li><li>删除远程tag <ul><li>git push origin :refs/tags/[tagName]</li></ul></li><li>查看tag信息 <ul><li>git show [tag]</li></ul></li><li>提交指定tag <ul><li>git push [remote] [tag]</li></ul></li><li>提交所有tag <ul><li>git push [remote] --tags</li></ul></li><li>新建一个分支，指向某个tag <ul><li>git checkout -b [branch] [tag]</li></ul></li></ul><h3 id="查看信息" tabindex="-1">查看信息 <a class="header-anchor" href="#查看信息" aria-label="Permalink to &quot;查看信息&quot;">​</a></h3><ul><li>显示有变更的文件 <ul><li>git status</li></ul></li><li>显示当前分支的版本历史 <ul><li>git log</li></ul></li><li>显示commit历史，以及每次commit发生变更的文件 <ul><li>git log --stat</li></ul></li><li>搜索提交历史，根据关键词 <ul><li>git log -S [keyword]</li></ul></li><li>显示某个commit之后的所有变动，每个commit占据一行 <ul><li>git log [tag] HEAD --pretty=format:%s</li></ul></li><li>显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件 <ul><li>git log [tag] HEAD --grep feature</li></ul></li><li>显示某个文件的版本历史，包括文件改名 <ul><li>git log --follow [file]</li><li>git whatchanged [file]</li></ul></li><li>显示指定文件相关的每一次diff <ul><li>git log -p [file]</li></ul></li><li>显示过去5次提交 <ul><li>git log -5 --pretty --oneline</li></ul></li><li>显示所有提交过的用户，按提交次数排序 <ul><li>git shortlog -sn</li></ul></li><li>显示指定文件是什么人在什么时间修改过 <ul><li>git blame [file]</li></ul></li><li>显示暂存区和工作区的差异 <ul><li>git diff</li></ul></li><li>显示暂存区和上一个commit的差异 <ul><li>git diff --cached [file]</li></ul></li><li>显示工作区与当前分支最新commit之间的差异 <ul><li>git diff HEAD</li></ul></li><li>显示两次提交之间的差异 <ul><li>git diff [first-branch]...[second-branch]</li></ul></li><li>显示今天你写了多少行代码 <ul><li>git diff --shortstat &quot;@{0 day ago}&quot;</li></ul></li><li>显示某次提交的元数据和内容变化 <ul><li>git show [commit]</li></ul></li><li>显示某次提交发生变化的文件 <ul><li>git show --name-only [commit]</li></ul></li><li>显示某次提交时，某个文件的内容 <ul><li>git show [commit]:[filename]</li></ul></li><li>显示当前分支的最近几次提交 <ul><li>git reflog</li></ul></li></ul><h3 id="远程操作" tabindex="-1">远程操作 <a class="header-anchor" href="#远程操作" aria-label="Permalink to &quot;远程操作&quot;">​</a></h3><ul><li>下载远程仓库的所有变动 <ul><li>git fetch [remote]</li></ul></li><li>取回远程仓库的变化，并与本地分支合并 <ul><li>git pull [remote] [branch]</li></ul></li><li>显示所有远程仓库 <ul><li>git remote -v</li></ul></li><li>显示某个远程仓库的信息 <ul><li>git remote show [remote]</li></ul></li><li>增加一个新的远程仓库，并命名 <ul><li>git remote add [shortname] [url]</li></ul></li><li>上传本地指定分支到远程仓库 <ul><li>git push [remote] [branch]</li></ul></li><li>强行推送当前分支到远程仓库，即使有冲突 <ul><li>git push [remote] --force</li></ul></li><li>推送所有分支到远程仓库 <ul><li>git push [remote] --all</li></ul></li><li>删除远程分支或标签 <ul><li><code>git push &lt;remote&gt; :&lt;branch/tag-name&gt;</code></li></ul></li><li>上传所有标签 <ul><li>git push --tags</li></ul></li></ul><h3 id="撤销" tabindex="-1">撤销 <a class="header-anchor" href="#撤销" aria-label="Permalink to &quot;撤销&quot;">​</a></h3><ul><li>撤销工作目录中所有未提交文件的修改内容 <ul><li>git reset --hard HEAD</li></ul></li><li>撤销指定的未提交文件的修改内容 <ul><li><code> git checkout HEAD &lt;file&gt;</code></li></ul></li><li>撤销指定的提交 <ul><li><code>git revert &lt;commit&gt;</code></li></ul></li><li>退回到之前1天的版本 <ul><li>git log --before=&quot;1 days&quot;</li></ul></li><li>恢复暂存区的指定文件到工作区 <ul><li>git checkout [file]</li></ul></li><li>恢复某个commit的指定文件到暂存区和工作区 <ul><li>git checkout [commit] [file]</li></ul></li><li>恢复暂存区的所有文件到工作区 <ul><li>git checkout .</li></ul></li><li>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变 <ul><li>git reset [file]</li></ul></li><li>重置暂存区与工作区，与上一次commit保持一致 <ul><li>git reset --hard</li></ul></li><li>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变 <ul><li>git reset [commit]</li></ul></li><li>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致 <ul><li>git reset --hard [commit]</li></ul></li><li>重置当前HEAD为指定commit，但保持暂存区和工作区不变 <ul><li>git reset --keep [commit]</li></ul></li><li>新建一个commit，用来撤销指定commit <ul><li>后者的所有变化都将被前者抵消，并且应用到当前分支</li><li>git revert [commit]</li></ul></li><li>暂时将未提交的变化移除，稍后再移入 <ul><li>git stash</li><li>git stash pop</li></ul></li></ul><h3 id="清理" tabindex="-1">清理 <a class="header-anchor" href="#清理" aria-label="Permalink to &quot;清理&quot;">​</a></h3><h4 id="clean" tabindex="-1">clean <a class="header-anchor" href="#clean" aria-label="Permalink to &quot;clean&quot;">​</a></h4><ul><li><code>git clean -n</code>：告诉你哪些文件会被删除，并不会真正删除</li><li><code>git clean -f</code>：删除未在<code>.gitignore</code>中定义的文件</li><li><code>git clean -df</code>：删除未追踪的文件的目录</li><li><code>git clean -xdf</code>：删除未追踪的文件和目录，不管有没有在<code>.gitignore</code>中排除</li></ul><h3 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h3><ul><li>生成一个可供发布的压缩包 <ul><li>git archive</li></ul></li></ul>`,22)]))}const s=i(u,[["render",o]]);export{d as __pageData,s as default};
