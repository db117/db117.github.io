import{_ as t,c as e,o as l,a}from"./app.a840672a.js";const x=JSON.parse('{"title":"线上问题分析","description":"","frontmatter":{"title":"线上问题分析"},"headers":[{"level":3,"title":"CUP 过高","slug":"cup-过高","link":"#cup-过高","children":[]},{"level":3,"title":"内存问题","slug":"内存问题","link":"#内存问题","children":[]},{"level":3,"title":"GC信息","slug":"gc信息","link":"#gc信息","children":[{"level":4,"title":"查看某个进程的PID","slug":"查看某个进程的pid","link":"#查看某个进程的pid","children":[]},{"level":4,"title":"查看特定进程的数量","slug":"查看特定进程的数量","link":"#查看特定进程的数量","children":[]},{"level":4,"title":"查看线程是否存在死锁","slug":"查看线程是否存在死锁","link":"#查看线程是否存在死锁","children":[]}]}],"relativePath":"java/线上问题查找.md","lastUpdated":1678341619000}'),s={name:"java/线上问题查找.md"},d=a(`<h3 id="cup-过高" tabindex="-1">CUP 过高 <a class="header-anchor" href="#cup-过高" aria-hidden="true">#</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"># 找出进程 id</span></span>
<span class="line"><span style="color:#A6ACCD;">top 	# 找最高的</span></span>
<span class="line"><span style="color:#A6ACCD;">jps   	# 直接找 Java 进程</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 找线程 ID</span></span>
<span class="line"><span style="color:#A6ACCD;">top -Hp 进程ID</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">#　把线程ID转换为16进制</span></span>
<span class="line"><span style="color:#A6ACCD;">printf &quot;%x\\n&quot;  PID</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"># 查询线程　</span></span>
<span class="line"><span style="color:#A6ACCD;">jstack PID</span></span>
<span class="line"><span style="color:#A6ACCD;">jstack PID | grep &lt;进程id 16进制&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="内存问题" tabindex="-1">内存问题 <a class="header-anchor" href="#内存问题" aria-hidden="true">#</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"># 　查看进程中的内存映像信息</span></span>
<span class="line"><span style="color:#A6ACCD;">jmap pid</span></span>
<span class="line"><span style="color:#A6ACCD;">#　显示 Java 堆详细信息</span></span>
<span class="line"><span style="color:#A6ACCD;">jmap -heap pid</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">jmap -histo pid</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h3 id="gc信息" tabindex="-1">GC信息 <a class="header-anchor" href="#gc信息" aria-hidden="true">#</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;"># 查看 GC 信息</span></span>
<span class="line"><span style="color:#A6ACCD;">jstat -gc pid</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="查看某个进程的pid" tabindex="-1">查看某个进程的PID <a class="header-anchor" href="#查看某个进程的pid" aria-hidden="true">#</a></h4><p>如查看java的进程的pid，<code>ps -ef | grep java</code>:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">[root@localhost ~]# ps -ef | grep java</span></span>
<span class="line"><span style="color:#A6ACCD;">root     124146   1984  0 09:13 pts/0    00:00:06 java -jar arthas-demo.jar</span></span>
<span class="line"><span style="color:#A6ACCD;">root     125210  98378  0 10:07 pts/1    00:00:00 grep --color=auto java</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="查看特定进程的数量" tabindex="-1">查看特定进程的数量 <a class="header-anchor" href="#查看特定进程的数量" aria-hidden="true">#</a></h4><p>如查看java进程的数量,<code>ps -ef | grep java| wc -l</code>：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight" tabindex="0"><code><span class="line"><span style="color:#A6ACCD;">[root@localhost ~]# ps -ef | grep java| wc -l</span></span>
<span class="line"><span style="color:#A6ACCD;">2</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><h4 id="查看线程是否存在死锁" tabindex="-1">查看线程是否存在死锁 <a class="header-anchor" href="#查看线程是否存在死锁" aria-hidden="true">#</a></h4><p>查看线程是否存在死锁，<code>jstack -l pid</code>：</p><table><thead><tr><th style="text-align:left;">类别</th><th style="text-align:left;">监控命令</th><th style="text-align:left;">描述</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:left;">内存瓶颈</td><td style="text-align:left;">free</td><td style="text-align:left;">查看内存使用</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">vmstat 3(间隔时间) 100(监控次数)</td><td style="text-align:left;">查看swap in/out详细定位是否存在性能瓶颈</td><td style="text-align:left;">推荐使用</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">sar -r 3</td><td style="text-align:left;">和free命令类似，查看内存的使用情况，但是不包含swap的情况</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">cpu瓶颈</td><td style="text-align:left;">top -H</td><td style="text-align:left;">按照cpu消耗高低进行排序</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">ps -Lp 进程号 cu</td><td style="text-align:left;">查看某个进程的cpu消耗排序</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">cat /proc/cpuinfo |grep &#39;processor&#39;|wc -l</td><td style="text-align:left;">查看cpu核数</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">top</td><td style="text-align:left;">查看cpu总体消耗，包括分项消耗如user,system,idle,nice等消耗</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">top 然后shift+h:显示java线程，然后shift+M:按照内存使用进行排序；shift+P:按照cpu时间排序;shift+T:按照cpu累计使用时间排序多核cpu，按“1”进入top视图</td><td style="text-align:left;">专项性能排查，多核CPU主要看CUP各个内核的负载情况</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">sar -u 3(间隔时间)</td><td style="text-align:left;">查看cpu总体消耗占比</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">sar -q</td><td style="text-align:left;">查看cpu load</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">top -b -n 1 | awk &#39;{if (NR&lt;=7)print;else if($8==&quot;D&quot;){print;count++}}END{print &quot;Total status D:&quot;count}&#39;</td><td style="text-align:left;">计算在cpu load里面的uninterruptedsleep的任务数量 uninterruptedsleep的任务会被计入cpu load，如磁盘堵塞</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">网络瓶颈</td><td style="text-align:left;">cat /var/log/messages</td><td style="text-align:left;">查看内核日志，查看是否丢包</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">watch more /proc/net/dev</td><td style="text-align:left;">用于定位丢包，错包情况，以便看网络瓶颈</td><td style="text-align:left;">重点关注drop(包被丢弃)和网络包传送的总量，不要超过网络上限</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">sar -n SOCK</td><td style="text-align:left;">查看网络流量</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">netstat -na|grep ESTABLISHED|wc -l</td><td style="text-align:left;">查看tcp连接成功状态的数量</td><td style="text-align:left;">此命令特别消耗cpu，不适合进行长时间监控数据收集</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">netstat -na|awk&#39;{print $6}&#39;|sort |uniq -c |sort -nr</td><td style="text-align:left;">看tcp各个状态数量</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">netstat -i</td><td style="text-align:left;">查看网络错误</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">ss state ESTABLISHED| wc -l</td><td style="text-align:left;">更高效地统计tcp连接状态为ESTABLISHED的数量</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">cat /proc/net/snmp</td><td style="text-align:left;">查看和分析240秒内网络包量，流量，错包，丢包</td><td style="text-align:left;">用于计算重传率<code>tcpetr=RetransSegs/OutSegs</code></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">ping $ip</td><td style="text-align:left;">测试网络性能</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">traceroute $ip</td><td style="text-align:left;">查看路由经过的地址</td><td style="text-align:left;">常用于定位网络在各个路由区段的耗时</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">dig $域名</td><td style="text-align:left;">查看域名解析地址</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">dmesg</td><td style="text-align:left;">查看系统内核日志</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">磁盘瓶颈</td><td style="text-align:left;">iostat -x -k -d 1</td><td style="text-align:left;">详细列出磁盘的读写情况</td><td style="text-align:left;">当看到I/O等待时间所占CPU时间的比重很高的时候，首先要检查的就是机器是否正在大量使用交换空间，同时关注iowait占比cpu的消耗是否很大，如果大说明磁盘存在大的瓶颈，同时关注await，表示磁盘的响应时间以便小于5ms</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">iostat -x</td><td style="text-align:left;">查看系统各个磁盘的读写性能</td><td style="text-align:left;">重点关注await和iowait的cpu占比</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">iotop</td><td style="text-align:left;">查看哪个进程在大量读取IO</td><td style="text-align:left;">一般先通过iostat查看是否存在io瓶颈，再定位哪个进程在大量读取IO</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">df -hl</td><td style="text-align:left;">查看磁盘剩余空间</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">du -sh</td><td style="text-align:left;">查看磁盘使用了多少空间</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">应用瓶颈</td><td style="text-align:left;">ps -ef</td><td style="text-align:left;">grep java</td><td style="text-align:left;">查看某个进程的id号</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">ps -ef | grep httpd| wc -l</td><td style="text-align:left;">查看特定进程的数量</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">cat *** .log | grep *** Exception| wc -l</td><td style="text-align:left;">统计日志文件中包含特定异常数量</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">jstack -l pid</td><td style="text-align:left;">用于查看线程是否存在死锁</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">awk&#39;{print $8}&#39; 2017-05-22-access_log|egrep &#39;301|302&#39;| wc -l</td><td style="text-align:left;">统计log中301、302状态码的行数，$8表示第八列是状态码，可以根据实际情况更改</td><td style="text-align:left;">常用于应用故障定位</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">grep &#39;wholesaleProductDetailNew&#39; cookie_log | awk &#39;{if($10==&quot;200&quot;)}&#39;print}&#39;</td><td style="text-align:left;">awk &#39;print $12&#39; | more</td><td style="text-align:left;">打印包含特定数据的12列数据</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">grep &quot;2017:05:22&quot; cookielog | awk &#39;($12&gt;0.3){print 8}&#39; | sort &gt; 目录地址</td><td style="text-align:left;">对apache或者nginx访问log进行响应时间排序，$12表示cookie log中的12列表示响应时间 用于排查是否是由于是某些访问超长造成整体的RT变长</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">grep -v &#39;HTTP/1.1&quot; 200&#39;</td><td style="text-align:left;">取出非200响应码的URL</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">pgm -A -f $应用集群名称 &quot;grep &quot;&#39;301&#39; log文件地址 | wc -l&quot;</td><td style="text-align:left;">查看整个集群的log中301状态码的数量</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">ps -efL | grep [PID] | wc -l</td><td style="text-align:left;">查看某个进程创建的线程数</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">find / -type f -name &quot; * .log&quot; | xargs grep &quot;ERROR&quot;</td><td style="text-align:left;">统计所有的log文件中，包含Error字符的行</td><td style="text-align:left;">这个在排查问题过程中比较有用</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">jstat -gc [pid]</td><td style="text-align:left;">查看gc情况</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">jstat -gcnew [pid]</td><td style="text-align:left;">查看young区的内存使用情况，包括MTT(最大交互次数就被交换到old区)，TT是目前已经交换的次数</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">jstat -gcold</td><td style="text-align:left;">查看old区的内存使用情况</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">jmap -J-d64 -dump:format=b,file=dump.bin PID</td><td style="text-align:left;">dump出内存快照</td><td style="text-align:left;">-J-d64防止jmap导致虚拟机crash(jdk6有bug)</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-XX:+HeapDumpOnOutOfMemeryError</td><td style="text-align:left;">在java启动时加入，当出现内存溢出时，存储内存快照</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">jmap -histo [pid]</td><td style="text-align:left;">按照对象内存大小排序</td><td style="text-align:left;">注意会导致full gc</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">gcore [pid]</td><td style="text-align:left;">导出完成的内存快照</td><td style="text-align:left;">通常和<code>jmap -permstat /opt/ ** /java gcore.bin</code>一起使用，将core dump转换成heap dump</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-XX:HeapDumpPath=/home/logs -Xloggc:/home/log/gc.log -XX:+PrintGCDetails -XX:+PrintGCDateStamps</td><td style="text-align:left;">在Java启动参数中加入，打印gc日志</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-server -Xms4000m -Xmx4000m -Xmn1500m -Xss256k -XX:PermSize=340m -XX:MaxPermSize=340m -XX:+UseConcMarkSweepGC</td><td style="text-align:left;">调整JVM堆大小</td><td style="text-align:left;">xss是栈大小</td></tr></tbody></table>`,15),n=[d];function i(p,g,r,o,y,f){return l(),e("div",null,n)}const u=t(s,[["render",i]]);export{x as __pageData,u as default};
