import{_ as l,c as e,o as a,U as i}from"./chunks/framework.sVmxGSNH.js";const A=JSON.parse('{"title":"jackson常见操作","description":"","frontmatter":{"title":"jackson常见操作"},"headers":[],"relativePath":"java/other/jackjson.md","filePath":"java/other/jackjson.md","lastUpdated":1704889606000}'),s={name:"java/other/jackjson.md"},o=i(`<blockquote><p><a href="https://github.com/FasterXML/jackson" target="_blank" rel="noreferrer">FasterXML/jackson: Main Portal page for the Jackson project (github.com)</a></p></blockquote><h3 id="常用-api" tabindex="-1">常用 api <a class="header-anchor" href="#常用-api" aria-label="Permalink to &quot;常用 api&quot;">​</a></h3><h4 id="json-转对象" tabindex="-1">json 转对象 <a class="header-anchor" href="#json-转对象" aria-label="Permalink to &quot;json 转对象&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>// 对象</span></span>
<span class="line"><span>POJO result = MAPPER.readerFor(POJO.class).readValue(p);</span></span>
<span class="line"><span>POJO result = MAPPER.readValue(source, POJO.class);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public enum ABC { A, B, C; }</span></span>
<span class="line"><span>// 数组</span></span>
<span class="line"><span>ABC[] value = MAPPER.readerForArrayOf(ABC.class).readValue(&quot;[ \\&quot;A\\&quot;, \\&quot;C\\&quot; ]&quot;);</span></span>
<span class="line"><span>// list</span></span>
<span class="line"><span>ArrayList value = MAPPER.readerForListOf(ABC.class).readValue(&quot;[ \\&quot;B\\&quot;, \\&quot;C\\&quot; ]&quot;);</span></span>
<span class="line"><span>// map</span></span>
<span class="line"><span>LinkedHashMap value = MAPPER.readerForMapOf(ABC.class).readValue(&quot;{\\&quot;key\\&quot; : \\&quot;B\\&quot; }&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 使用 TypeReference ，来解决泛型</span></span>
<span class="line"><span>TypeReference ref = new TypeReference&lt;List&lt;Integer&gt;&gt;() { };</span></span>
<span class="line"><span>List&lt;Integer&gt; ans = MAPPER.readValue(&quot;&quot;,ref);</span></span></code></pre></div><h4 id="对象转-json" tabindex="-1">对象转 json <a class="header-anchor" href="#对象转-json" aria-label="Permalink to &quot;对象转 json&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>MAPPER.writeValueAsString()；</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 只处理 Foo 及其子类，其他类直接抛出异常</span></span>
<span class="line"><span>ObjectWriter writer = MAPPER.writerFor(Foo.class);</span></span>
<span class="line"><span>writer.writeValueAsString(new Foo());</span></span></code></pre></div><hr><h3 id="常用配置" tabindex="-1">常用配置 <a class="header-anchor" href="#常用配置" aria-label="Permalink to &quot;常用配置&quot;">​</a></h3><h4 id="反序列化功能" tabindex="-1">反序列化功能 <a class="header-anchor" href="#反序列化功能" aria-label="Permalink to &quot;反序列化功能&quot;">​</a></h4><p>在枚举<code>com.fasterxml.jackson.databind.DeserializationFeature</code>中</p><p><strong>类型转换</strong></p><ul><li>USE_BIG_DECIMAL_FOR_FLOATS (default: false) <ul><li>使用<code>java.math.BigDecimal</code>来保存浮点数</li><li>不影响显式类型</li><li>关闭情况下使用 <code>java.lang.Double</code></li></ul></li><li>USE_BIG_INTEGER_FOR_INTS (default: false) <ul><li>使用<code>java.math.BigInteger</code>来保存无小数点数字</li><li>关闭情况下使用<code>java.lang.Integer</code> 或 <code>java.lang.Long</code>，优先使用最小适用类型</li></ul></li><li>USE_LONG_FOR_INTS (default: false) <ul><li>使用<code>java.lang.Long</code>来保存</li><li>优先级低于<code>USE_BIG_INTEGER_FOR_INTS</code></li></ul></li><li>USE_JAVA_ARRAY_FOR_JSON_ARRAY (default: false) <ul><li>开启时对于未定义类型的<code>java.util.List</code> 和 <code>Object[]</code>时，使用<code>Object[]</code></li><li>关闭时使用<code>java.util.List</code>接收参数</li></ul></li><li>READ_ENUMS_USING_TO_STRING (default: false) <ul><li><code>false</code> 时使用<code>Enum.name()</code>; <code>true</code> 时<code>Enum.toString()</code></li></ul></li></ul><p><strong>结构转换</strong></p><ul><li>ACCEPT_SINGLE_VALUE_AS_ARRAY (default: false) <ul><li>允许一个值序列化为集合。在数据只有一个或没有时可以反序列化为数组或集合。</li><li>标准格式不会出现这种情况</li></ul></li><li>UNWRAP_ROOT_VALUE (default: false) <ul><li>和<code>ACCEPT_SINGLE_VALUE_AS_ARRAY</code>情况相反，会把一个数组对象绑定到一个对象上</li><li>当出现多个对象是，会抛出异常</li></ul></li></ul><p><strong>值转换，强制的那种</strong></p><ul><li>ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT (default: false) <ul><li>如果启用则数组串相当于 json null</li></ul></li><li>ACCEPT_EMPTY_STRING_AS_NULL_OBJECT (default: false) <ul><li>如果启用则空字符串相当于 json null</li></ul></li><li>ACCEPT_FLOAT_AS_INT (default: true) <ul><li>是否允许将浮点数转换为整数 (<code>int</code>, <code>long</code>, <code>Integer</code>, <code>Long</code>, <code>BigInteger</code>)</li><li>如果允许则截断为整数</li><li>不允许则抛出异常</li></ul></li><li>READ_DATE_TIMESTAMPS_AS_NANOSECONDS (default: false) <ul><li>对时间戳按照纳秒进行绑定</li><li>只针对与 Java8 Date/Time ，对于<code>java.util.Date</code>无效</li><li>和<code>SerializationFeature#WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS</code>对应</li></ul></li><li>READ_UNKNOWN_ENUM_VALUES_AS_NULL (default: false) <ul><li>对于未知枚举类使用 null</li><li>未开启时会抛出异常</li></ul></li><li>READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE (default: false) <ul><li>对于未识别枚举使用默认值，使用@<code>JsonEnumDefaultValue</code>设置默认值</li><li>如未开启或未知道默认值则抛出异常</li></ul></li></ul><p><strong>故障处理</strong></p><ul><li>FAIL_ON_IGNORED_PROPERTIES (default: false) <ul><li>遇到显示忽略的属性是否抛出异常，默认跳过</li></ul></li><li>FAIL_ON_UNKNOWN_PROPERTIES (default: true) <ul><li>遇到未定义属性，且没有 setter 方法时抛出异常</li></ul></li><li>FAIL_ON_NULL_FOR_PRIMITIVES (default: false) <ul><li>基本时间类型为 <code>null</code> 时是否抛出异常，为 <code>false</code> 时使用默认值</li></ul></li><li>FAIL_ON_NUMBERS_FOR_ENUMS (default: false) <ul><li>(0, 1, 2, ...) 是否可以反序列化为枚举，为<code>false</code> 是可以与 <code>Enum.ordinal()</code>匹配，为 <code>true</code> 抛出异常</li></ul></li><li>FAIL_ON_READING_DUP_TREE_KEY (default: false) <ul><li>遇见重复属性名称是，是否抛出异常。</li><li>为 <code>false</code> 时使用最后一个匹配的值</li></ul></li></ul><h4 id="序列化功能" tabindex="-1">序列化功能 <a class="header-anchor" href="#序列化功能" aria-label="Permalink to &quot;序列化功能&quot;">​</a></h4><p>在枚举<code>com.fasterxml.jackson.databind.SerializationFeature</code>中</p><p><strong>通用特性</strong></p><ul><li>INDENT_OUTPUT (default: false) <ul><li>是否使用缩进</li></ul></li></ul><p><strong>数据类型处理</strong></p><ul><li>WRITE_DATES_AS_TIMESTAMPS (default: true) <ul><li>是否将时间转换为时间戳，如果为 false 则使用 <code>SerializationConfig.getDateFormat</code></li></ul></li><li>WRITE_DATE_KEYS_AS_TIMESTAMPS (default: false) <ul><li>是否将时间属性的 key 序列化为时间戳，如果为 <code>false</code> 则使用 (ISO-8601)</li></ul></li><li>WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS (default: false) <ul><li>是否将 char 数组序列化为 json 数组（一个字符的数组）</li><li>为 false 时序列化为一个字符串</li></ul></li><li>WRITE_ENUMS_USING_TO_STRING (default: false) <ul><li>控制枚举序列化名称</li><li>为 true 是为 <code>Enum.toString()</code>，否则为 <code>Enum.name()</code>（默认）</li></ul></li><li>WRITE_ENUMS_USING_INDEX (default: false) <ul><li>决定枚举序列化名称，为 true 时使用<code>Enum.ordinal()</code></li><li>优先级大于<code>WRITE_ENUMS_USING_TO_STRING</code></li></ul></li><li>WRITE_BIGDECIMAL_AS_PLAIN (default: false) <ul><li>为 <code>true</code>时会阻止将数值序列化为科学计数法（带 E）</li></ul></li><li>WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS (default: true) <ul><li>是否将毫秒数序列化</li><li>只有在 java8 中带有毫秒数是才生效</li></ul></li><li>ORDER_MAP_ENTRIES_BY_KEYS (default: false) <ul><li>对于 map 序列化时，是否对 <code>key</code> 先排序</li></ul></li></ul><hr><h3 id="常用注解" tabindex="-1">常用注解 <a class="header-anchor" href="#常用注解" aria-label="Permalink to &quot;常用注解&quot;">​</a></h3><blockquote><p><a href="https://www.baeldung.com/jackson-advanced-annotations" target="_blank" rel="noreferrer">More Jackson Annotations | Baeldung</a></p></blockquote><ul><li><p>@JsonProperty</p><ul><li>更改属性的 JSON 名称</li></ul></li><li><p>@JsonIgnore</p><ul><li>忽略某个字段</li></ul></li><li><p>@JsonIgnoreProperties</p><ul><li>忽略某些字段</li><li><code>ignoreUnknown</code> 忽略未知属性</li><li><code>allowGetters</code> 允许 get 方法，默认 false</li><li><code>allowSetters</code> 允许 set 方法，默认 false</li></ul></li><li><p>@JsonIgnoreType</p><ul><li>忽略某个类型，在序列化与反序列化时忽略某些类型</li></ul></li><li><p>@JsonAlias</p><ul><li>对字段类型设置别名</li><li>可配合@<code>JsonCreator</code>使用</li></ul></li><li><p>@JsonFilter</p><ul><li>过滤某些字段</li><li>通过<code>SimpleFilterProvider</code>简单使用</li></ul></li><li><p>@JsonFormat</p><ul><li>指定序列号格式</li></ul></li><li><p>@JsonRootName</p><ul><li>指定对象在 json 中的名称</li></ul></li><li><p>@JsonDeserialize</p><ul><li>指定反序列化实现</li></ul></li><li><p>@JsonSerialize</p><ul><li>指定序列化实现</li></ul></li><li><p>@JsonNaming</p><ul><li>字段命名策略</li></ul></li><li><p>@JsonAutoDetect</p><ul><li>在序列化与反序列化时的字段可见性</li></ul></li></ul>`,28),n=[o];function t(u,c,d,r,p,_){return a(),e("div",null,n)}const f=l(s,[["render",t]]);export{A as __pageData,f as default};
