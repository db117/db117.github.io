import{_ as p,c as i,a3 as a,o as l}from"./chunks/framework.YXwISiAl.js";const m=JSON.parse('{"title":"常用命令","description":"","frontmatter":{"title":"常用命令"},"headers":[],"relativePath":"ops/docker/常用命令.md","filePath":"ops/docker/常用命令.md"}'),o={name:"ops/docker/常用命令.md"};function r(t,e,c,d,u,n){return l(),i("div",null,e[0]||(e[0]=[a('<h2 id="run" tabindex="-1">run <a class="header-anchor" href="#run" aria-label="Permalink to &quot;run&quot;">​</a></h2><p><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p><ul><li>OPTIONS说明： <ul><li>-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li><li>-d: 后台运行容器，并返回容器ID；</li><li>-i: 以交互模式运行容器，通常与 -t 同时使用；</li><li>-p: 端口映射，格式为：主机(宿主)端口:容器端口</li><li>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li>--name=&quot;nginx-lb&quot;: 为容器指定一个名称；</li><li>--add-host:添加域名ip映射</li><li>--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</li><li>--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</li><li>-h &quot;mars&quot;: 指定容器的hostname；</li><li>-e username=&quot;ritchie&quot;: 设置环境变量；</li><li>--env-file=[]: 从指定文件读入环境变量；</li><li>--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行；</li><li>-m :设置容器使用内存最大值；</li><li>--net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li><li>--link=[]: 添加链接到另一个容器；</li><li>--expose=[]: 开放一个端口或一组端口；</li></ul></li></ul><h2 id="rm-删除一个或多少容器" tabindex="-1">rm 删除一个或多少容器 <a class="header-anchor" href="#rm-删除一个或多少容器" aria-label="Permalink to &quot;rm 删除一个或多少容器&quot;">​</a></h2><p><code>docker rm [OPTIONS] CONTAINER [CONTAINER...]</code></p><ul><li><p>OPTIONS说明：</p><p>-f :通过SIGKILL信号强制删除一个运行中的容器</p><p>-l :移除容器间的网络连接，而非容器本身</p><p>-v :-v 删除与容器关联的卷</p></li></ul><h2 id="exec-在运行的容器中执行命令" tabindex="-1">exec ：在运行的容器中执行命令 <a class="header-anchor" href="#exec-在运行的容器中执行命令" aria-label="Permalink to &quot;exec ：在运行的容器中执行命令&quot;">​</a></h2><p><code>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</code></p><ul><li><p>OPTIONS说明：</p><p>-d :分离模式: 在后台运行</p><p>-i :即使没有附加也保持STDIN 打开</p><p>-t :分配一个伪终端</p></li></ul><h2 id="ps-列出容器" tabindex="-1">ps : 列出容器 <a class="header-anchor" href="#ps-列出容器" aria-label="Permalink to &quot;ps : 列出容器&quot;">​</a></h2><p><code>docker ps [OPTIONS]</code></p><ul><li><p>OPTIONS说明：</p><p>-a :显示所有的容器，包括未运行的。</p><p>-f :根据条件过滤显示的内容。</p><p>--format :指定返回值的模板文件。</p><p>-l :显示最近创建的容器。</p><p>-n :列出最近创建的n个容器。</p><p>--no-trunc :不截断输出。</p><p>-q :静默模式，只显示容器编号。</p><p>-s :显示总的文件大小。</p></li></ul><h2 id="cp-用于容器与主机之间的数据拷贝。" tabindex="-1">cp :用于容器与主机之间的数据拷贝。 <a class="header-anchor" href="#cp-用于容器与主机之间的数据拷贝。" aria-label="Permalink to &quot;cp :用于容器与主机之间的数据拷贝。&quot;">​</a></h2><pre><code>```docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-```\n```docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH ```\n</code></pre><h2 id="images-列出本地镜像。" tabindex="-1">images : 列出本地镜像。 <a class="header-anchor" href="#images-列出本地镜像。" aria-label="Permalink to &quot;images : 列出本地镜像。&quot;">​</a></h2><pre><code>```docker images [OPTIONS] [REPOSITORY[:TAG]]```\n</code></pre><ul><li><p>OPTIONS说明：</p><p>-a :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；</p><p>--digests :显示镜像的摘要信息；</p><p>-f :显示满足条件的镜像；</p><p>--format :指定返回值的模板文件；</p><p>--no-trunc :显示完整的镜像信息；</p><p>-q :只显示镜像ID。</p></li></ul><h2 id="rmi-删除本地一个或多少镜像。" tabindex="-1">rmi : 删除本地一个或多少镜像。 <a class="header-anchor" href="#rmi-删除本地一个或多少镜像。" aria-label="Permalink to &quot;rmi : 删除本地一个或多少镜像。&quot;">​</a></h2><ul><li><p><code>docker rmi [OPTIONS] IMAGE [IMAGE...]</code></p></li><li><p>OPTIONS说明：</p><p>-f :强制删除；</p><p>--no-prune :不移除该镜像的过程镜像，默认移除；</p></li></ul><h2 id="build-命令用于使用-dockerfile-创建镜像。" tabindex="-1">build 命令用于使用 Dockerfile 创建镜像。 <a class="header-anchor" href="#build-命令用于使用-dockerfile-创建镜像。" aria-label="Permalink to &quot;build 命令用于使用 Dockerfile 创建镜像。&quot;">​</a></h2><ul><li><p><code>docker build [OPTIONS] PATH | URL | -</code></p></li><li><p>OPTIONS说明：</p><p>--build-arg=[] :设置镜像创建时的变量；</p><p>--cpu-shares :设置 cpu 使用权重；</p><p>--cpu-period :限制 CPU CFS周期；</p><p>--cpu-quota :限制 CPU CFS配额；</p><p>--cpuset-cpus :指定使用的CPU id；</p><p>--cpuset-mems :指定使用的内存 id；</p><p>--disable-content-trust :忽略校验，默认开启；</p><p>-f :指定要使用的Dockerfile路径；</p><p>--force-rm :设置镜像过程中删除中间容器；</p><p>--isolation :使用容器隔离技术；</p><p>--label=[] :设置镜像使用的元数据；</p><p>-m :设置内存最大值；</p><p>--memory-swap :设置Swap的最大值为内存+swap，&quot;-1&quot;表示不限swap；</p><p>--no-cache :创建镜像的过程不使用缓存；</p><p>--pull :尝试去更新镜像的新版本；</p><p>--quiet, -q :安静模式，成功后只输出镜像 ID；</p><p>--rm :设置镜像成功后删除中间容器；</p><p>--shm-size :设置/dev/shm的大小，默认值是64M；</p><p>--ulimit :Ulimit配置。</p><p>--tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</p><p>--network: 默认 default。在构建期间设置RUN指令的网络模式</p></li></ul>',21)]))}const h=p(o,[["render",r]]);export{m as __pageData,h as default};
