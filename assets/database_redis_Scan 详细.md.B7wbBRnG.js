import{_ as a,c as e,o as t,a8 as r}from"./chunks/framework.BaglXmoE.js";const p=JSON.parse('{"title":"scan 解析","description":"","frontmatter":{"title":"scan 解析"},"headers":[],"relativePath":"database/redis/Scan 详细.md","filePath":"database/redis/Scan 详细.md","lastUpdated":1710853433000}'),i={name:"database/redis/Scan 详细.md"},l=r('<blockquote><p><a href="https://redis.io/commands/scan/" target="_blank" rel="noreferrer">SCAN | Redis</a></p></blockquote><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li>如果有一个元素， 它从遍历开始直到遍历结束期间都存在于被遍历的数据集当中， 那么 <code>SCAN</code>命令总会在某次迭代中将这个元素返回给用户。</li><li>如果有一个元素， 它从遍历开始就已经被删除，且直到遍历结束也没有被添加回来， 那么 <code>SCAN</code>命令确保不会返回这个元素。</li></ul><h4 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h4><ul><li>同一个元素可能会被返回多次。 处理重复元素的工作交由应用程序负责， 比如说， 可以考虑将迭代返回的元素仅仅用于可以安全地重复执行多次的操作上。</li><li>如果一个元素是在迭代过程中被添加到数据集的， 又或者是在迭代过程中从数据集中被删除的， 那么这个元素可能会被返回， 也可能不会， 这是未定义的（undefined）。</li></ul><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><ul><li><strong>返回的结果可能会有重复，需要客户端去重复，这点非常重要;</strong></li><li><strong>遍历的过程中如果有数据修改，改动后的数据能不能遍历到是不确定的;</strong></li><li><strong>单次返回的结果是空的并不意味着遍历结束，而要看返回的游标值是否为零;</strong></li></ul><h3 id="源码" tabindex="-1">源码 <a class="header-anchor" href="#源码" aria-label="Permalink to &quot;源码&quot;">​</a></h3><p><a href="https://github.com/redis/redis/blob/1571907ea02020a829fca63806780c6f3ecf65a0/src/dict.c#L892" target="_blank" rel="noreferrer">https://github.com/redis/redis/blob/1571907ea02020a829fca63806780c6f3ecf65a0/src/dict.c#L892</a></p><p>实际上是直接获取 hash 表的槽，一个槽一个槽的返回。游标可以找到槽的位置。</p><p>用了一个很巧妙的算法来计算游标</p><ul><li>在扩容时不会重复且不会漏掉数据</li><li>在缩容是不会漏掉数据</li></ul>',12),o=[l];function s(c,n,d,h,_,u){return t(),e("div",null,o)}const b=a(i,[["render",s]]);export{p as __pageData,b as default};
