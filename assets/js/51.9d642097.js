(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{455:function(e,t,o){"use strict";o.r(t);var s=o(34),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h2",{attrs:{id:"流程图"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#流程图"}},[e._v("#")]),e._v(" 流程图")]),e._v(" "),o("iframe",{staticStyle:{display:"block",width:"725px",height:"245px"},attrs:{id:"embed_dom",name:"embed_dom",frameborder:"0",src:"https://www.processon.com/embed/612318b37d9c0856876bb0de"}}),e._v(" "),o("h2",{attrs:{id:"refresh"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#refresh"}},[e._v("#")]),e._v(" refresh")]),e._v(" "),o("blockquote",[o("p",[e._v("通过初始化各种工厂，扫描BeanDefinition等操作后才会允许用户介入初始化流程")])]),e._v(" "),o("h4",{attrs:{id:"beandefinitionregistrypostprocessor"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#beandefinitionregistrypostprocessor"}},[e._v("#")]),e._v(" BeanDefinitionRegistryPostProcessor")]),e._v(" "),o("blockquote",[o("p",[e._v("主要作用是往容器中添加BeanDefinition")])]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("ConfigurationClassPostProcessor")]),e._v(" "),o("ul",[o("li",[o("p",[e._v("@PropertySource，@PropertySources：添加配置文件")])]),e._v(" "),o("li",[o("p",[e._v("@ComponentScan，@ComponentScans：扫描bean")])]),e._v(" "),o("li",[o("p",[e._v("@Import：往容器中添加bean")]),e._v(" "),o("ul",[o("li",[e._v("如果实现"),o("code",[e._v("ImportSelector")]),e._v("，则添加调用 "),o("code",[e._v("selectImports")]),e._v("获取配置类")]),e._v(" "),o("li",[e._v("在处理完"),o("code",[e._v("ImportSelector")]),e._v("后处理"),o("code",[e._v("DeferredImportSelector")]),e._v("接口。特别是存在"),o("code",[e._v("@Conditional")]),e._v("时，要在其他bean都加载完后才能起到相应的作用")])])]),e._v(" "),o("li",[o("p",[e._v("处理"),o("code",[e._v("@ImportResource")]),e._v("注解")])]),e._v(" "),o("li",[o("p",[e._v("处理"),o("code",[e._v("@Bean")]),e._v("，添加bean")]),e._v(" "),o("blockquote",[o("p",[e._v("Configuration#proxyBeanMethods 为true时，会对说有@bean方法添加代理，直接通过beanFactory获取。即调用该方法时实际只执行一次，多次调用返回的对象是同一个。")])])])])])]),e._v(" "),o("h4",{attrs:{id:"instantiationawarebeanpostprocessor-postprocessbeforeinstantiation"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#instantiationawarebeanpostprocessor-postprocessbeforeinstantiation"}},[e._v("#")]),e._v(" InstantiationAwareBeanPostProcessor#postProcessBeforeInstantiation")]),e._v(" "),o("blockquote",[o("p",[e._v("bean初始化前的操作，主要是生成代理对象")])]),e._v(" "),o("h4",{attrs:{id:"mergedbeandefinitionpostprocessor-postprocessmergedbeandefinition"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#mergedbeandefinitionpostprocessor-postprocessmergedbeandefinition"}},[e._v("#")]),e._v(" MergedBeanDefinitionPostProcessor#postProcessMergedBeanDefinition")]),e._v(" "),o("blockquote",[o("p",[e._v("主要作用是修改BeanDefinition")])]),e._v(" "),o("ul",[o("li",[o("code",[e._v("com.alibaba.cloud.sentinel.custom.SentinelBeanPostProcessor")]),e._v("：处理 @SentinelRestTemplate，在RestTemplate中添加拦截器")])]),e._v(" "),o("h4",{attrs:{id:"instantiationawarebeanpostprocessor-postprocessafterinstantiation"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#instantiationawarebeanpostprocessor-postprocessafterinstantiation"}},[e._v("#")]),e._v(" InstantiationAwareBeanPostProcessor#postProcessAfterInstantiation")]),e._v(" "),o("blockquote",[o("p",[e._v("在实例化之后，赋值属性之前调用，返回false则不进行后续赋值。")])]),e._v(" "),o("h4",{attrs:{id:"instantiationawarebeanpostprocessor-postprocessproperties"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#instantiationawarebeanpostprocessor-postprocessproperties"}},[e._v("#")]),e._v(" InstantiationAwareBeanPostProcessor#postProcessProperties")]),e._v(" "),o("blockquote",[o("p",[e._v("在设置属性后调用修改属性")])]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("AutowiredAnnotationBeanPostProcessor")]),e._v(" "),o("ul",[o("li",[e._v("注入"),o("code",[e._v("@Autowired")]),e._v(","),o("code",[e._v("@Value")]),e._v("属性")]),e._v(" "),o("li",[e._v("处理"),o("code",[e._v("javax.inject.Inject")]),e._v("注解")])])])]),e._v(" "),o("h4",{attrs:{id:"aware"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#aware"}},[e._v("#")]),e._v(" Aware")]),e._v(" "),o("blockquote",[o("p",[e._v("设置各种对象")])]),e._v(" "),o("h4",{attrs:{id:"beanpostprocessor-postprocessbeforeinitialization"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#beanpostprocessor-postprocessbeforeinitialization"}},[e._v("#")]),e._v(" BeanPostProcessor#postProcessBeforeInitialization")]),e._v(" "),o("blockquote",[o("p",[e._v("在初始化之前调用所有后置处理器")])]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("ApplicationContextAwareProcessor")]),e._v(" "),o("ul",[o("li",[e._v("设置所有"),o("code",[e._v("Aware")])])])]),e._v(" "),o("li",[o("strong",[e._v("InitDestroyAnnotationBeanPostProcessor")]),e._v(" "),o("ul",[o("li",[e._v("处理 "),o("code",[e._v("@PostConstruct")])])])])]),e._v(" "),o("h4",{attrs:{id:"initializingbean-afterpropertiesset"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#initializingbean-afterpropertiesset"}},[e._v("#")]),e._v(" InitializingBean#afterPropertiesSet")]),e._v(" "),o("blockquote",[o("p",[e._v("在初始化前调用afterPropertiesSet方法")])]),e._v(" "),o("h4",{attrs:{id:"beanpostprocessor-postprocessafterinitialization"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#beanpostprocessor-postprocessafterinitialization"}},[e._v("#")]),e._v(" BeanPostProcessor#postProcessAfterInitialization")]),e._v(" "),o("blockquote",[o("p",[e._v("初始化后调用")])]),e._v(" "),o("ul",[o("li",[o("strong",[e._v("AbstractAdvisingBeanPostProcessor")]),e._v(" "),o("ul",[o("li",[e._v("实现aop功能，生成代理对象")])])]),e._v(" "),o("li",[e._v("ApplicationListenerDetector\n"),o("ul",[o("li",[e._v("如果当前类是监听器，则添加监听器到applicationContext")])])]),e._v(" "),o("li",[e._v("ScheduledAnnotationBeanPostProcessor\n"),o("ul",[o("li",[e._v("处理 "),o("code",[e._v("@Scheduled")])])])])]),e._v(" "),o("h4",{attrs:{id:"destructionawarebeanpostprocessor-postprocessbeforedestruction"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#destructionawarebeanpostprocessor-postprocessbeforedestruction"}},[e._v("#")]),e._v(" DestructionAwareBeanPostProcessor#postProcessBeforeDestruction")]),e._v(" "),o("blockquote",[o("p",[e._v("在销毁之前调用")])]),e._v(" "),o("ul",[o("li",[e._v("InitDestroyAnnotationBeanPostProcessor\n"),o("ul",[o("li",[e._v("调用标记 "),o("code",[e._v("@PreDestroy")]),e._v("方法")])])]),e._v(" "),o("li",[e._v("ApplicationListenerDetector\n"),o("ul",[o("li",[e._v("注销监听器")])])]),e._v(" "),o("li",[e._v("ScheduledAnnotationBeanPostProcessor\n"),o("ul",[o("li",[e._v("关闭任务")])])])]),e._v(" "),o("h4",{attrs:{id:"org-springframework-beans-factory-smartinitializingsingleton-aftersingletonsinstantiated"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#org-springframework-beans-factory-smartinitializingsingleton-aftersingletonsinstantiated"}},[e._v("#")]),e._v(" org.springframework.beans.factory.SmartInitializingSingleton#afterSingletonsInstantiated")]),e._v(" "),o("blockquote",[o("p",[e._v("会在所有非延迟加载单例 bean 加载完成后调用")])]),e._v(" "),o("ul",[o("li",[o("p",[o("code",[e._v("com.alibaba.cloud.sentinel.custom.SentinelDataSourceHandler")]),e._v("：处理 sentinel 数据源")])]),e._v(" "),o("li",[o("p",[o("code",[e._v("org.springframework.context.event.EventListenerMethodProcessor")])]),e._v(" "),o("blockquote",[o("p",[e._v("处理"),o("code",[e._v("org.springframework.context.event.EventListener")]),e._v("。")])])])]),e._v(" "),o("h4",{attrs:{id:"applicationlistener"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#applicationlistener"}},[e._v("#")]),e._v(" "),o("strong",[e._v("ApplicationListener")])]),e._v(" "),o("blockquote",[o("p",[e._v("监听 spring 发送的事件。可以在 spring，spring-boot 各个阶段进行调用。")])])])}),[],!1,null,null,null);t.default=r.exports}}]);