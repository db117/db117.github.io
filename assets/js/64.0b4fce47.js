(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{341:function(e,t,a){"use strict";a.r(t);var r=a(10),v=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("blockquote",[t("p",[e._v("基于spring-webflux，netty，springCloud的一个反应式网关。")])]),e._v(" "),t("iframe",{staticStyle:{display:"block",width:"725px",height:"245px"},attrs:{id:"embed_dom",name:"embed_dom",frameborder:"0",src:"https://www.processon.com/embed/616fc00e1efad42eb5ebffb5"}}),e._v(" "),t("h3",{attrs:{id:"基础组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础组件"}},[e._v("#")]),e._v(" 基础组件")]),e._v(" "),t("ul",[t("li",[t("p",[t("strong",[e._v("route")])]),e._v(" "),t("p",[e._v("由一个id，一个目标URL，一组谓词（"),t("strong",[e._v("Predicate")]),e._v("），和一组过滤器（"),t("strong",[e._v("Filter")]),e._v("）组成")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("org.springframework.cloud.gateway.route.Route\n  private final String id;\n\n\tprivate final URI uri;\n\n\tprivate final int order;\n\n\tprivate final AsyncPredicate<ServerWebExchange> predicate;\n\n\tprivate final List<GatewayFilter> gatewayFilters;\n\n\tprivate final Map<String, Object> metadata;\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br")])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Predicate")])]),e._v(" "),t("p",[e._v("继承与"),t("code",[e._v("java.util.function.Predicate")]),e._v("，入参为 "),t("code",[e._v("org.springframework.web.server.ServerWebExchange")]),e._v("，通过 "),t("code",[e._v("test（）")]),e._v("方法判断是否匹配")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public interface GatewayPredicate extends Predicate<ServerWebExchange>\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("Filter")])]),e._v(" "),t("p",[e._v("形成过滤器调用链，处理请求值，返回值。")])])]),e._v(" "),t("h3",{attrs:{id:"默认配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#默认配置"}},[e._v("#")]),e._v(" 默认配置")]),e._v(" "),t("blockquote",[t("p",[e._v("介绍一下主要的配置信息 "),t("code",[e._v("org.springframework.cloud.gateway.config.GatewayAutoConfiguration")])])]),e._v(" "),t("ul",[t("li",[t("p",[t("strong",[e._v("CompositeRouteDefinitionLocator")])]),e._v(" "),t("p",[e._v("一个"),t("code",[e._v("org.springframework.cloud.gateway.route.RouteDefinitionLocator")]),e._v("合集，主要获取route。集成了一下几个")]),e._v(" "),t("ul",[t("li",[e._v("CachingRouteDefinitionLocator：缓存如有信息")]),e._v(" "),t("li",[e._v("DiscoveryClientRouteDefinitionLocator：通过服务发现加载路由")]),e._v(" "),t("li",[e._v("InMemoryRouteDefinitionRepository：通过api管理的路由信息")]),e._v(" "),t("li",[e._v("PropertiesRouteDefinitionLocator：配置文件的路由信息")])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("CachingRouteLocator")])]),e._v(" "),t("p",[e._v("获取所有"),t("code",[e._v("RouteLocator")]),e._v("，通过"),t("code",[e._v("RouteDefinitionLocator")]),e._v("获取路由配置信息，生成路由并缓存。")]),e._v(" "),t("p",[e._v("发生"),t("code",[e._v("RefreshRoutesEvent")]),e._v("事件时刷新缓存")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("RouteRefreshListener")])]),e._v(" "),t("p",[e._v("监听"),t("code",[e._v("ContextRefreshedEvent")]),e._v("，"),t("code",[e._v("RefreshScopeRefreshedEvent")]),e._v("，"),t("code",[e._v("InstanceRegisteredEvent")]),e._v("，"),t("code",[e._v("ParentHeartbeatEvent")]),e._v("，"),t("code",[e._v("HeartbeatEvent")]),e._v("等事件。发送"),t("code",[e._v("RefreshRoutesEvent")]),e._v("事件。")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("FilteringWebHandler")])]),e._v(" "),t("p",[e._v("Gateway入口，由webflux核心"),t("code",[e._v("DispatcherHandler")]),e._v("调用，主要工作就是把GlobalFilter通过"),t("code",[e._v("GatewayFilterAdapter")]),e._v("适配成"),t("code",[e._v("GatewayFilter")]),e._v("并生成调用链"),t("code",[e._v("org.springframework.cloud.gateway.handler.FilteringWebHandler.DefaultGatewayFilterChain")]),e._v("。")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("RoutePredicateHandlerMapping")])]),e._v(" "),t("p",[e._v("主要负责找到执行的路由，通过调用路由的"),t("code",[e._v("AsyncPredicate")]),e._v("判断。")])]),e._v(" "),t("li",[t("p",[e._v("GatewayProperties")]),e._v(" "),t("p",[e._v("就是配置文件"),t("code",[e._v("spring.cloud.gateway")]),e._v("的东西")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("HttpClient")])]),e._v(" "),t("p",[e._v("netty发起请求的客户端")])]),e._v(" "),t("li",[t("p",[e._v("HttpClientProperties")]),e._v(" "),t("p",[t("code",[e._v("spring.cloud.gateway.httpclient")]),e._v("下的配置")])])]),e._v(" "),t("h4",{attrs:{id:"predicatefactory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#predicatefactory"}},[e._v("#")]),e._v(" PredicateFactory")]),e._v(" "),t("blockquote",[t("p",[e._v("通过一下形式进行配置，会在系统加载的时候进行创建并组装到route中。")]),e._v(" "),t("p",[e._v("名称为下面的名称去掉"),t("code",[e._v("RoutePredicateFactory")]),e._v("，参数逗号分隔。")]),e._v(" "),t("p",[e._v("格式为 "),t("code",[e._v("- <name>=arg,arg...")]),e._v("  或者 kv形式的")])]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("predicates:\n- Cookie=mycookie, mycookievalue\n- name: Cookie\n  args:\n    name: mycookie\n    regexp: mycookievalue\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br")])]),t("ul",[t("li",[t("p",[e._v("AfterRoutePredicateFactory")]),e._v(" "),t("p",[e._v("在某个时间段后，入参为"),t("code",[e._v("datetime")])])]),e._v(" "),t("li",[t("p",[e._v("BeforeRoutePredicateFactory")]),e._v(" "),t("p",[e._v("在某个时间段前，入参为"),t("code",[e._v("datetime")])])]),e._v(" "),t("li",[t("p",[e._v("BetweenRoutePredicateFactory")]),e._v(" "),t("p",[e._v("在某个时间段之间，入参为"),t("code",[e._v("datetime1")]),e._v("，"),t("code",[e._v("datetime1")])])]),e._v(" "),t("li",[t("p",[e._v("CookieRoutePredicateFactory")]),e._v(" "),t("p",[e._v("判断cookies是否满足正则匹配规则，入参为"),t("code",[e._v("name")]),e._v("，"),t("code",[e._v("regexp")])])]),e._v(" "),t("li",[t("p",[e._v("HeaderRoutePredicateFactory")]),e._v(" "),t("p",[e._v("判断Header是否满足正则匹配规则，入参为"),t("code",[e._v("header")]),e._v("，"),t("code",[e._v("regexp")])])]),e._v(" "),t("li",[t("p",[e._v("HostRoutePredicateFactory")]),e._v(" "),t("p",[e._v("进行host匹配判断，入参为"),t("code",[e._v("patterns")]),e._v("集合（逗号分隔）")])]),e._v(" "),t("li",[t("p",[e._v("MethodRoutePredicateFactory")]),e._v(" "),t("p",[e._v("通过请求方法进行判断，入参为"),t("code",[e._v("methods")]),e._v("集合（逗号分隔）")])]),e._v(" "),t("li",[t("p",[e._v("PathRoutePredicateFactory")]),e._v(" "),t("p",[e._v("根据path判断，入参为"),t("code",[e._v("patterns")]),e._v("集合，最后一个参数可以为布尔类型"),t("code",[e._v("matchTrailingSlash")]),e._v("是否匹配反斜杠，默认为")]),e._v(" "),t("p",[e._v("可在配置文件中添加{segment}，在filter中通过以下代码获取")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('predicates:\n- Path=/red/{segment},/blue/{segment}\n\n\nMap<String, String> uriVariables = ServerWebExchangeUtils.getPathPredicateVariables(exchange);\n\nString segment = uriVariables.get("segment");\n')])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br")])])]),e._v(" "),t("li",[t("p",[e._v("QueryRoutePredicateFactory")]),e._v(" "),t("p",[e._v("通过查询参数来搬到判断，入参为"),t("code",[e._v("param")]),e._v("，"),t("code",[e._v("regexp")])])]),e._v(" "),t("li",[t("p",[e._v("RemoteAddrRoutePredicateFactory")]),e._v(" "),t("p",[e._v("通过远程地址来判断，入参为"),t("code",[e._v("sources")])])])]),e._v(" "),t("h4",{attrs:{id:"gatewayfilterfactory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gatewayfilterfactory"}},[e._v("#")]),e._v(" GatewayFilterFactory")]),e._v(" "),t("blockquote",[t("p",[e._v("网关过滤器，和PredicateFactory配置模式基本上一致")]),e._v(" "),t("p",[e._v("详细查看 "),t("a",{attrs:{href:"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gatewayfilter-factories",target:"_blank",rel:"noopener noreferrer"}},[e._v("Spring Cloud Gateway"),t("OutboundLink")],1)])]),e._v(" "),t("h4",{attrs:{id:"globalfilter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#globalfilter"}},[e._v("#")]),e._v(" GlobalFilter")]),e._v(" "),t("blockquote",[t("p",[e._v("所有请求都走的过滤器，与"),t("code",[e._v("gatewayFilter")]),e._v("的接口签名一致。在执行是会转换成"),t("code",[e._v("gatewayFilter")]),e._v("即"),t("code",[e._v("org.springframework.cloud.gateway.handler.FilteringWebHandler.GatewayFilterAdapter")]),e._v("，形成一个调用链。")]),e._v(" "),t("p",[e._v("以下介绍主要的过滤器，按照优先级进行排列")])]),e._v(" "),t("ul",[t("li",[t("p",[e._v("RemoveCachedBodyFilter")]),e._v(" "),t("p",[e._v("优先级为"),t("code",[e._v("Integer.MIN_VALUE")]),e._v("，作用为所有操作完成后执行回调，清除缓存。缓存是通过"),t("code",[e._v("org.springframework.cloud.gateway.support.ServerWebExchangeUtils#cacheRequestBodyAndRequest")]),e._v("添加的。")])]),e._v(" "),t("li",[t("p",[e._v("NettyWriteResponseFilter")]),e._v(" "),t("p",[t("strong",[e._v("优先级为-1")]),e._v("，会调用"),t("code",[e._v("org.springframework.http.ReactiveHttpOutputMessage#writeWith")]),e._v("或"),t("code",[e._v("writeAndFlushWith")]),e._v("把连接返回值写入到http层。")]),e._v(" "),t("p",[e._v("**如需加入修改返回值的过滤器，优先级一定要比-1小，才会生效。**比如"),t("code",[e._v("org.springframework.cloud.gateway.filter.factory.rewrite.ModifyResponseBodyGatewayFilterFactory.ModifyResponseGatewayFiltery")]),e._v("优先级为-2。")])]),e._v(" "),t("li",[t("p",[e._v("ForwardPathFilter")]),e._v(" "),t("p",[e._v("优先级为0，对forward请求修改请求path。")])]),e._v(" "),t("li",[t("p",[e._v("RouteToRequestUrlFilter")]),e._v(" "),t("p",[e._v("优先级为"),t("code",[e._v("10000")]),e._v("，获取路由并修改请求地址为路由地址。路由在"),t("code",[e._v("org.springframework.cloud.gateway.handler.RoutePredicateHandlerMapping#getHandlerInternal")]),e._v("中添加。")])]),e._v(" "),t("li",[t("p",[e._v("ReactiveLoadBalancerClientFilter")]),e._v(" "),t("p",[e._v("优先级为"),t("code",[e._v("10150")]),e._v("，对"),t("code",[e._v("lb")]),e._v("进行负载均衡获取实例，并把实际请求路径写入到属性中。")])]),e._v(" "),t("li",[t("p",[e._v("NettyRoutingFilter")]),e._v(" "),t("p",[e._v("优先级为"),t("code",[e._v("Integer.MAX_VALUE")]),e._v("，实际转发请求的地方，并把返回信息保存到参数信息中。所有需要修改请求信息的都在它之前。")])])])])}),[],!1,null,null,null);t.default=v.exports}}]);