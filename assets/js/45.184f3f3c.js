(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{322:function(_,e,l){"use strict";l.r(e);var v=l(10),a=Object(v.a)({},(function(){var _=this,e=_._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("blockquote",[e("p",[e("a",{attrs:{href:"https://github.com/FasterXML/jackson",target:"_blank",rel:"noopener noreferrer"}},[_._v("FasterXML/jackson: Main Portal page for the Jackson project (github.com)"),e("OutboundLink")],1)])]),_._v(" "),e("h3",{attrs:{id:"常用-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用-api"}},[_._v("#")]),_._v(" 常用 api")]),_._v(" "),e("h4",{attrs:{id:"json-转对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#json-转对象"}},[_._v("#")]),_._v(" json 转对象")]),_._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v('// 对象\nPOJO result = MAPPER.readerFor(POJO.class).readValue(p);\nPOJO result = MAPPER.readValue(source, POJO.class);\n\npublic enum ABC { A, B, C; }\n// 数组\nABC[] value = MAPPER.readerForArrayOf(ABC.class).readValue("[ \\"A\\", \\"C\\" ]");\n// list\nArrayList value = MAPPER.readerForListOf(ABC.class).readValue("[ \\"B\\", \\"C\\" ]");\n// map\nLinkedHashMap value = MAPPER.readerForMapOf(ABC.class).readValue("{\\"key\\" : \\"B\\" }");\n\n// 使用 TypeReference ，来解决泛型\nTypeReference ref = new TypeReference<List<Integer>>() { };\nList<Integer> ans = MAPPER.readValue("",ref);\n')])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br"),e("span",{staticClass:"line-number"},[_._v("2")]),e("br"),e("span",{staticClass:"line-number"},[_._v("3")]),e("br"),e("span",{staticClass:"line-number"},[_._v("4")]),e("br"),e("span",{staticClass:"line-number"},[_._v("5")]),e("br"),e("span",{staticClass:"line-number"},[_._v("6")]),e("br"),e("span",{staticClass:"line-number"},[_._v("7")]),e("br"),e("span",{staticClass:"line-number"},[_._v("8")]),e("br"),e("span",{staticClass:"line-number"},[_._v("9")]),e("br"),e("span",{staticClass:"line-number"},[_._v("10")]),e("br"),e("span",{staticClass:"line-number"},[_._v("11")]),e("br"),e("span",{staticClass:"line-number"},[_._v("12")]),e("br"),e("span",{staticClass:"line-number"},[_._v("13")]),e("br"),e("span",{staticClass:"line-number"},[_._v("14")]),e("br"),e("span",{staticClass:"line-number"},[_._v("15")]),e("br")])]),e("h4",{attrs:{id:"对象转-json"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对象转-json"}},[_._v("#")]),_._v(" 对象转 json")]),_._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("MAPPER.writeValueAsString()；\n\n// 只处理 Foo 及其子类，其他类直接抛出异常\nObjectWriter writer = MAPPER.writerFor(Foo.class);\nwriter.writeValueAsString(new Foo());\n\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br"),e("span",{staticClass:"line-number"},[_._v("2")]),e("br"),e("span",{staticClass:"line-number"},[_._v("3")]),e("br"),e("span",{staticClass:"line-number"},[_._v("4")]),e("br"),e("span",{staticClass:"line-number"},[_._v("5")]),e("br"),e("span",{staticClass:"line-number"},[_._v("6")]),e("br")])]),e("hr"),_._v(" "),e("h3",{attrs:{id:"常用配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用配置"}},[_._v("#")]),_._v(" 常用配置")]),_._v(" "),e("h4",{attrs:{id:"反序列化功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#反序列化功能"}},[_._v("#")]),_._v(" 反序列化功能")]),_._v(" "),e("p",[_._v("在枚举"),e("code",[_._v("com.fasterxml.jackson.databind.DeserializationFeature")]),_._v("中")]),_._v(" "),e("p",[e("strong",[_._v("类型转换")])]),_._v(" "),e("ul",[e("li",[_._v("USE_BIG_DECIMAL_FOR_FLOATS (default: false)\n"),e("ul",[e("li",[_._v("使用"),e("code",[_._v("java.math.BigDecimal")]),_._v("来保存浮点数")]),_._v(" "),e("li",[_._v("不影响显式类型")]),_._v(" "),e("li",[_._v("关闭情况下使用 "),e("code",[_._v("java.lang.Double")])])])]),_._v(" "),e("li",[_._v("USE_BIG_INTEGER_FOR_INTS (default: false)\n"),e("ul",[e("li",[_._v("使用"),e("code",[_._v("java.math.BigInteger")]),_._v("来保存无小数点数字")]),_._v(" "),e("li",[_._v("关闭情况下使用"),e("code",[_._v("java.lang.Integer")]),_._v(" 或 "),e("code",[_._v("java.lang.Long")]),_._v("，优先使用最小适用类型")])])]),_._v(" "),e("li",[_._v("USE_LONG_FOR_INTS (default: false)\n"),e("ul",[e("li",[_._v("使用"),e("code",[_._v("java.lang.Long")]),_._v("来保存")]),_._v(" "),e("li",[_._v("优先级低于"),e("code",[_._v("USE_BIG_INTEGER_FOR_INTS")])])])]),_._v(" "),e("li",[_._v("USE_JAVA_ARRAY_FOR_JSON_ARRAY (default: false)\n"),e("ul",[e("li",[_._v("开启时对于未定义类型的"),e("code",[_._v("java.util.List")]),_._v(" 和 "),e("code",[_._v("Object[]")]),_._v("时，使用"),e("code",[_._v("Object[]")])]),_._v(" "),e("li",[_._v("关闭时使用"),e("code",[_._v("java.util.List")]),_._v("接收参数")])])]),_._v(" "),e("li",[_._v("READ_ENUMS_USING_TO_STRING (default: false)\n"),e("ul",[e("li",[e("code",[_._v("false")]),_._v(" 时使用"),e("code",[_._v("Enum.name()")]),_._v(";  "),e("code",[_._v("true")]),_._v(" 时"),e("code",[_._v("Enum.toString()")])])])])]),_._v(" "),e("p",[e("strong",[_._v("结构转换")])]),_._v(" "),e("ul",[e("li",[_._v("ACCEPT_SINGLE_VALUE_AS_ARRAY (default: false)\n"),e("ul",[e("li",[_._v("允许一个值序列化为集合。在数据只有一个或没有时可以反序列化为数组或集合。")]),_._v(" "),e("li",[_._v("标准格式不会出现这种情况")])])]),_._v(" "),e("li",[_._v("UNWRAP_ROOT_VALUE (default: false)\n"),e("ul",[e("li",[_._v("和"),e("code",[_._v("ACCEPT_SINGLE_VALUE_AS_ARRAY")]),_._v("情况相反，会把一个数组对象绑定到一个对象上")]),_._v(" "),e("li",[_._v("当出现多个对象是，会抛出异常")])])])]),_._v(" "),e("p",[e("strong",[_._v("值转换，强制的那种")])]),_._v(" "),e("ul",[e("li",[_._v("ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT (default: false)\n"),e("ul",[e("li",[_._v("如果启用则数组串相当于 json null")])])]),_._v(" "),e("li",[_._v("ACCEPT_EMPTY_STRING_AS_NULL_OBJECT (default: false)\n"),e("ul",[e("li",[_._v("如果启用则空字符串相当于 json null")])])]),_._v(" "),e("li",[_._v("ACCEPT_FLOAT_AS_INT (default: true)\n"),e("ul",[e("li",[_._v("是否允许将浮点数转换为整数 ("),e("code",[_._v("int")]),_._v(", "),e("code",[_._v("long")]),_._v(", "),e("code",[_._v("Integer")]),_._v(", "),e("code",[_._v("Long")]),_._v(", "),e("code",[_._v("BigInteger")]),_._v(")")]),_._v(" "),e("li",[_._v("如果允许则截断为整数")]),_._v(" "),e("li",[_._v("不允许则抛出异常")])])]),_._v(" "),e("li",[_._v("READ_DATE_TIMESTAMPS_AS_NANOSECONDS (default: false)\n"),e("ul",[e("li",[_._v("对时间戳按照纳秒进行绑定")]),_._v(" "),e("li",[_._v("只针对与 Java8 Date/Time ，对于"),e("code",[_._v("java.util.Date")]),_._v("无效")]),_._v(" "),e("li",[_._v("和"),e("code",[_._v("SerializationFeature#WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS")]),_._v("对应")])])]),_._v(" "),e("li",[_._v("READ_UNKNOWN_ENUM_VALUES_AS_NULL (default: false)\n"),e("ul",[e("li",[_._v("对于未知枚举类使用 null")]),_._v(" "),e("li",[_._v("未开启时会抛出异常")])])]),_._v(" "),e("li",[_._v("READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE (default: false)\n"),e("ul",[e("li",[_._v("对于未识别枚举使用默认值，使用@"),e("code",[_._v("JsonEnumDefaultValue")]),_._v("设置默认值")]),_._v(" "),e("li",[_._v("如未开启或未知道默认值则抛出异常")])])])]),_._v(" "),e("p",[e("strong",[_._v("故障处理")])]),_._v(" "),e("ul",[e("li",[_._v("FAIL_ON_IGNORED_PROPERTIES (default: false)\n"),e("ul",[e("li",[_._v("遇到显示忽略的属性是否抛出异常，默认跳过")])])]),_._v(" "),e("li",[_._v("FAIL_ON_UNKNOWN_PROPERTIES (default: true)\n"),e("ul",[e("li",[_._v("遇到未定义属性，且没有 setter 方法时抛出异常")])])]),_._v(" "),e("li",[_._v("FAIL_ON_NULL_FOR_PRIMITIVES (default: false)\n"),e("ul",[e("li",[_._v("基本时间类型为 "),e("code",[_._v("null")]),_._v(" 时是否抛出异常，为 "),e("code",[_._v("false")]),_._v(" 时使用默认值")])])]),_._v(" "),e("li",[_._v("FAIL_ON_NUMBERS_FOR_ENUMS (default: false)\n"),e("ul",[e("li",[_._v("(0, 1, 2, ...) 是否可以反序列化为枚举，为"),e("code",[_._v("false")]),_._v(" 是可以与 "),e("code",[_._v("Enum.ordinal()")]),_._v("匹配，为 "),e("code",[_._v("true")]),_._v(" 抛出异常")])])]),_._v(" "),e("li",[_._v("FAIL_ON_READING_DUP_TREE_KEY (default: false)\n"),e("ul",[e("li",[_._v("遇见重复属性名称是，是否抛出异常。")]),_._v(" "),e("li",[_._v("为 "),e("code",[_._v("false")]),_._v(" 时使用最后一个匹配的值")])])])]),_._v(" "),e("h4",{attrs:{id:"序列化功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#序列化功能"}},[_._v("#")]),_._v(" 序列化功能")]),_._v(" "),e("p",[_._v("在枚举"),e("code",[_._v("com.fasterxml.jackson.databind.SerializationFeature")]),_._v("中")]),_._v(" "),e("p",[e("strong",[_._v("通用特性")])]),_._v(" "),e("ul",[e("li",[_._v("INDENT_OUTPUT (default: false)\n"),e("ul",[e("li",[_._v("是否使用缩进")])])])]),_._v(" "),e("p",[e("strong",[_._v("数据类型处理")])]),_._v(" "),e("ul",[e("li",[_._v("WRITE_DATES_AS_TIMESTAMPS (default: true)\n"),e("ul",[e("li",[_._v("是否将时间转换为时间戳，如果为 false 则使用 "),e("code",[_._v("SerializationConfig.getDateFormat")])])])]),_._v(" "),e("li",[_._v("WRITE_DATE_KEYS_AS_TIMESTAMPS (default: false)\n"),e("ul",[e("li",[_._v("是否将时间属性的 key 序列化为时间戳，如果为 "),e("code",[_._v("false")]),_._v(" 则使用 (ISO-8601)")])])]),_._v(" "),e("li",[_._v("WRITE_CHAR_ARRAYS_AS_JSON_ARRAYS (default: false)\n"),e("ul",[e("li",[_._v("是否将 char 数组序列化为 json 数组（一个字符的数组）")]),_._v(" "),e("li",[_._v("为 false 时序列化为一个字符串")])])]),_._v(" "),e("li",[_._v("WRITE_ENUMS_USING_TO_STRING (default: false)\n"),e("ul",[e("li",[_._v("控制枚举序列化名称")]),_._v(" "),e("li",[_._v("为 true 是为 "),e("code",[_._v("Enum.toString()")]),_._v("，否则为 "),e("code",[_._v("Enum.name()")]),_._v("（默认）")])])]),_._v(" "),e("li",[_._v("WRITE_ENUMS_USING_INDEX (default: false)\n"),e("ul",[e("li",[_._v("决定枚举序列化名称，为 true 时使用"),e("code",[_._v("Enum.ordinal()")])]),_._v(" "),e("li",[_._v("优先级大于"),e("code",[_._v("WRITE_ENUMS_USING_TO_STRING")])])])]),_._v(" "),e("li",[_._v("WRITE_BIGDECIMAL_AS_PLAIN (default: false)\n"),e("ul",[e("li",[_._v("为 "),e("code",[_._v("true")]),_._v("时会阻止将数值序列化为科学计数法（带 E）")])])]),_._v(" "),e("li",[_._v("WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS (default: true)\n"),e("ul",[e("li",[_._v("是否将毫秒数序列化")]),_._v(" "),e("li",[_._v("只有在 java8 中带有毫秒数是才生效")])])]),_._v(" "),e("li",[_._v("ORDER_MAP_ENTRIES_BY_KEYS (default: false)\n"),e("ul",[e("li",[_._v("对于 map 序列化时，是否对 "),e("code",[_._v("key")]),_._v(" 先排序")])])])]),_._v(" "),e("hr"),_._v(" "),e("h3",{attrs:{id:"常用注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用注解"}},[_._v("#")]),_._v(" 常用注解")]),_._v(" "),e("blockquote",[e("p",[e("a",{attrs:{href:"https://www.baeldung.com/jackson-advanced-annotations",target:"_blank",rel:"noopener noreferrer"}},[_._v("More Jackson Annotations | Baeldung"),e("OutboundLink")],1)])]),_._v(" "),e("ul",[e("li",[e("p",[_._v("@JsonProperty")]),_._v(" "),e("ul",[e("li",[_._v("更改属性的 JSON 名称")])])]),_._v(" "),e("li",[e("p",[_._v("@JsonIgnore")]),_._v(" "),e("ul",[e("li",[_._v("忽略某个字段")])])]),_._v(" "),e("li",[e("p",[_._v("@JsonIgnoreProperties")]),_._v(" "),e("ul",[e("li",[_._v("忽略某些字段")]),_._v(" "),e("li",[e("code",[_._v("ignoreUnknown")]),_._v(" 忽略未知属性")]),_._v(" "),e("li",[e("code",[_._v("allowGetters")]),_._v(" 允许 get 方法，默认 false")]),_._v(" "),e("li",[e("code",[_._v("allowSetters")]),_._v(" 允许 set 方法，默认 false")])])]),_._v(" "),e("li",[e("p",[_._v("@JsonIgnoreType")]),_._v(" "),e("ul",[e("li",[_._v("忽略某个类型，在序列化与反序列化时忽略某些类型")])])]),_._v(" "),e("li",[e("p",[_._v("@JsonAlias")]),_._v(" "),e("ul",[e("li",[_._v("对字段类型设置别名")]),_._v(" "),e("li",[_._v("可配合@"),e("code",[_._v("JsonCreator")]),_._v("使用")])])]),_._v(" "),e("li",[e("p",[_._v("@JsonFilter")]),_._v(" "),e("ul",[e("li",[_._v("过滤某些字段")]),_._v(" "),e("li",[_._v("通过"),e("code",[_._v("SimpleFilterProvider")]),_._v("简单使用")])])]),_._v(" "),e("li",[e("p",[_._v("@JsonFormat")]),_._v(" "),e("ul",[e("li",[_._v("指定序列号格式")])])]),_._v(" "),e("li",[e("p",[_._v("@JsonRootName")]),_._v(" "),e("ul",[e("li",[_._v("指定对象在 json 中的名称")])])]),_._v(" "),e("li",[e("p",[_._v("@JsonDeserialize")]),_._v(" "),e("ul",[e("li",[_._v("指定反序列化实现")])])]),_._v(" "),e("li",[e("p",[_._v("@JsonSerialize")]),_._v(" "),e("ul",[e("li",[_._v("指定序列化实现")])])]),_._v(" "),e("li",[e("p",[_._v("@JsonNaming")]),_._v(" "),e("ul",[e("li",[_._v("字段命名策略")])])]),_._v(" "),e("li",[e("p",[_._v("@JsonAutoDetect")]),_._v(" "),e("ul",[e("li",[_._v("在序列化与反序列化时的字段可见性")])])])])])}),[],!1,null,null,null);e.default=a.exports}}]);