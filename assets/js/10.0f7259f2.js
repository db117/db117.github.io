(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{402:function(s,n,a){"use strict";a.r(n);var t=a(31),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"蓄水池抽样算法-reservoir-sampling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#蓄水池抽样算法-reservoir-sampling"}},[s._v("#")]),s._v(" 蓄水池抽样算法（Reservoir Sampling）")]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("给定一个数据流，数据流长度N很大，且N直到处理完所有数据之前都不可知，请问如何在只遍历一遍数据（O(N)）的情况下，能够随机选取出m个不重复的数据。")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("int[] result = new int[K];\nfor (int i = 0; i < K; i++) { // 前 K 个元素直接放入数组中\n \tresult[i] = pool[i];\n}\n\nfor (int i = K; i < N; i++) { // K + 1 个元素开始进行概率采样\n  int r = random.nextInt(i + 1);\n  if (r < K) {\n \t result[r] = pool[i];\n  }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"最大公约数-最小公倍数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最大公约数-最小公倍数"}},[s._v("#")]),s._v(" 最大公约数，最小公倍数")]),s._v(" "),a("blockquote",[a("p",[s._v("求最小公倍数需要最大公约数")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 最小公倍数\nprivate long lcm(long a, long b) {\n\treturn a * b / gcd(a, b);\n}\n    \n// 最大公约数\nprivate long gcd(long x, long y) {\n  if (x == 0) return y;\n  return gcd(y % x, x);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h3",{attrs:{id:"枚举二进制子集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举二进制子集"}},[s._v("#")]),s._v(" 枚举二进制子集")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// m => 总状态数\nfor (int i = 1; i < m; i++) {\n    // 枚举状态 i 的二进制子集\n    for (int j = i; j > 0; j = (j - 1) & i) {\n        // To Do..\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])])])}),[],!1,null,null,null);n.default=e.exports}}]);