(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{312:function(s,a,e){"use strict";e.r(a);var t=e(10),v=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"类加载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类加载"}},[s._v("#")]),s._v(" 类加载")]),s._v(" "),a("h3",{attrs:{id:"加载流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#加载流程"}},[s._v("#")]),s._v(" 加载流程")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("加载")]),s._v(" "),a("blockquote",[a("p",[s._v("在硬盘上查找并通过IO读入字节码文件，"),a("strong",[s._v("使用到类时才会加载")]),s._v("，例如调用类的 main()方法，new对象等等，在加载阶段会在内存中生成一个代表这个类的 "),a("strong",[s._v("java.lang.Class对象")]),s._v("，作为方法区这个类的各种数据的访问入口")])])]),s._v(" "),a("li",[a("p",[s._v("验证")]),s._v(" "),a("blockquote",[a("p",[s._v("校验字节码文件的正确性")])])]),s._v(" "),a("li",[a("p",[s._v("准备")]),s._v(" "),a("blockquote",[a("p",[s._v("给类的静态变量分配内存，并赋予默认值")])])]),s._v(" "),a("li",[a("p",[s._v("解析")]),s._v(" "),a("blockquote",[a("p",[s._v("将"),a("strong",[s._v("符号引用")]),s._v("替换为直接引用，该阶段会把一些静态方法(符号引用，比如 main()方法)替换为指向数据所存内存的指针或句柄等(直接引用)，这是所谓的"),a("strong",[s._v("静态链接")]),s._v("过 程(类加载期间完成)，"),a("strong",[s._v("动态链接")]),s._v("是在程序运行期间完成的将符号引用替换为直接引用")])])]),s._v(" "),a("li",[a("p",[s._v("初始化")]),s._v(" "),a("blockquote",[a("p",[s._v("对类的静态变量初始化为指定的值，执行静态代码块")])])])]),s._v(" "),a("blockquote",[a("p",[s._v("类被加载到方法区中后主要包含 "),a("strong",[s._v("运行时常量池、类型信息、字段信息、方法信息、类加载器的")])]),s._v(" "),a("p",[a("strong",[s._v("引用、对应class实例的引用")]),s._v("等信息。")]),s._v(" "),a("p",[a("strong",[s._v("类加载器的引用")]),s._v("：这个类到类加载器实例的引用")]),s._v(" "),a("p",[a("strong",[s._v("对应class实例的引用")]),s._v("：类加载器在加载类信息放到方法区中后，会创建一个对应的Class 类型的")]),s._v(" "),a("p",[s._v("对象实例放到堆(Heap)中, 作为开发人员访问方法区中类定义的入口和切入点。")])]),s._v(" "),a("h3",{attrs:{id:"双亲委派机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派机制"}},[s._v("#")]),s._v(" 双亲委派机制")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("引导类加载器")]),s._v(" "),a("blockquote",[a("p",[s._v("负责加载支撑JVM运行的位于JRE的lib目录下的核心类库，比如 rt.jar、charsets.jar等")])])]),s._v(" "),a("li",[a("p",[s._v("扩展类加载器")]),s._v(" "),a("blockquote",[a("p",[s._v("负责加载支撑JVM运行的位于JRE的lib目录下的ext扩展目录中的JAR 包")])])]),s._v(" "),a("li",[a("p",[s._v("应用程序类加载器")]),s._v(" "),a("blockquote",[a("p",[s._v("负责加载ClassPath路径下的类包，主要就是加载项目写的那些类")])])]),s._v(" "),a("li",[a("p",[s._v("自定义加载器")]),s._v(" "),a("blockquote",[a("p",[s._v("负责加载用户自定义路径下的类包")])])])]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("双亲委派机制说简单点就是，先找父亲加载，不行再由儿子自己加载")])])]),s._v(" "),a("blockquote",[a("p",[s._v("沙箱安全机制：自己写的java.lang.String.class类不会被加载，这样便可以防止核心 API库被随意篡改")]),s._v(" "),a("p",[s._v("避免类的重复加载：当父亲已经加载了该类时，就没有必要子ClassLoader再加载一 次，保证"),a("strong",[s._v("被加载类的唯一性")])])]),s._v(" "),a("h2",{attrs:{id:"对象创建流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象创建流程"}},[s._v("#")]),s._v(" 对象创建流程")]),s._v(" "),a("h3",{attrs:{id:"类加载检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类加载检查"}},[s._v("#")]),s._v(" 类加载检查")]),s._v(" "),a("blockquote",[a("p",[s._v("虚拟机遇到一条new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个")]),s._v(" "),a("p",[s._v("符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。")]),s._v(" "),a("p",[s._v("new指令对应到语言层面上讲是，new关键词、对象克隆、对象序列化等。")])]),s._v(" "),a("h3",{attrs:{id:"分配内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分配内存"}},[s._v("#")]),s._v(" 分配内存")]),s._v(" "),a("blockquote",[a("p",[s._v("在类加载检查通过后，接下来虚拟机将为新生对象分配内存。对象所需内存的大小在类 加载完成后便可完全确定，为")]),s._v(" "),a("p",[s._v("对象分配空间的任务等同于把 一块确定大小的内存从Java堆中划分出来。")])]),s._v(" "),a("p",[a("strong",[s._v("划分内存的方法：")])]),s._v(" "),a("ul",[a("li",[s._v("“指针碰撞”（Bump the Pointer）(默认用指针碰撞)")])]),s._v(" "),a("p",[s._v("如果Java堆中内存是绝对规整的，所有用过的内存都放在一边，空闲的内存放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间那边挪动一段与对象大小相等的距离。")]),s._v(" "),a("ul",[a("li",[s._v("“空闲列表”（Free List）")])]),s._v(" "),a("p",[s._v("如果Java堆中的内存并不是规整的，已使用的内存和空 闲的内存相互交错，那就没有办法简单地进行指针碰撞了，虚拟机就必须维护一个列表，记 录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例， 并更新列表上的记录")]),s._v(" "),a("p",[a("strong",[s._v("解决并发问题的方法：")])]),s._v(" "),a("ul",[a("li",[s._v("CAS（compare and swap）")])]),s._v(" "),a("p",[s._v("虚拟机采用"),a("strong",[s._v("CAS配上失败重试")]),s._v("的方式保证更新操作的原子性来对分配内存空间的动作进行同步处理。")]),s._v(" "),a("ul",[a("li",[s._v("本地线程分配缓冲（Thread Local Allocation Buffer,TLAB）")])]),s._v(" "),a("p",[s._v("把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存。通过**-XX:+/-UseTLAB参数来设定虚拟机是否使用TLAB(JVM会默认开启**)，-XX:TLABSize 指定TLAB大小。")]),s._v(" "),a("h3",{attrs:{id:"初始化零值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化零值"}},[s._v("#")]),s._v(" 初始化零值")]),s._v(" "),a("blockquote",[a("p",[s._v("内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值（不包括对象头）， 如果使用TLAB，这一工作过程也可以提前至TLAB分配时进行。这一步操作保证了对象的实例字段在Java代码中可以不赋初始值就直接使用，程序能访问到这些字段的数据类型所对应的零值。")])]),s._v(" "),a("h3",{attrs:{id:"设置对象头"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置对象头"}},[s._v("#")]),s._v(" 设置对象头")]),s._v(" "),a("blockquote",[a("p",[s._v("初始化零值之后，虚拟机要对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的GC分代年龄等信息。这些信息存放在对象的对象头Object Header之中。")]),s._v(" "),a("p",[s._v("在HotSpot虚拟机中，对象在内存中存储的布局可以分为3块区域：对象头（Header）、 实例数据（Instance Data）和对齐填充（Padding）。 HotSpot虚拟机的对象头包括两部分信息，第一部分用于存储对象自身的运行时数据， 如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时 间戳等。对象头的另外一部分是类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("对象头在hotspot的C++源码markOop.hpp文件里的注释：\n// Bit-format of an object header (most significant first, big endian layout below):\n//\n//  32 bits:\n//  --------\n//             hash:25 ------------\x3e| age:4    biased_lock:1 lock:2 (normal object)\n//             JavaThread*:23 epoch:2 age:4    biased_lock:1 lock:2 (biased object)\n//             size:32 ------------------------------------------\x3e| (CMS free block)\n//             PromotedObject*:29 ----------\x3e| promo_bits:3 -----\x3e| (CMS promoted object)\n//\n//  64 bits:\n//  --------\n//  unused:25 hash:31 --\x3e| unused:1   age:4    biased_lock:1 lock:2 (normalbrew object)\n//  JavaThread*:54 epoch:2 unused:1   age:4    biased_lock:1 lock:2 (biased object)\n//  PromotedObject*:61 ---------------------\x3e| promo_bits:3 -----\x3e| (CMS promoted object)\n//  size:64 -----------------------------------------------------\x3e| (CMS free block)\n//\n//  unused:25 hash:31 --\x3e| cms_free:1 age:4    biased_lock:1 lock:2 (COOPs && normal object)\n//  JavaThread*:54 epoch:2 cms_free:1 age:4    biased_lock:1 lock:2 (COOPs && biased object)\n//  narrowOop:32 unused:24 cms_free:1 unused:4 promo_bits:3 -----\x3e| (COOPs && CMS promoted object)\n//  unused:21 size:35 --\x3e| cms_free:1 unused:7 ------------------\x3e| (COOPs && CMS free block)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("h3",{attrs:{id:"执行init方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行init方法"}},[s._v("#")]),s._v(" 执行"),a("strong",[s._v("init")]),s._v("方法")]),s._v(" "),a("blockquote",[a("p",[s._v("执行"),a("strong",[s._v("init")]),s._v("方法，即对象按照程序员的意愿进行初始化。对应到语言层面上讲，就是为属性赋值（注意，这与上面的赋零值不同，这是由程序员赋的值），和执行构造方法。")])]),s._v(" "),a("h2",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[s._v("#")]),s._v(" 其他")]),s._v(" "),a("h3",{attrs:{id:"指针压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指针压缩"}},[s._v("#")]),s._v(" 指针压缩")]),s._v(" "),a("blockquote",[a("p",[s._v("jvm配置参数:UseCompressedOops，compressed--压缩、oop(ordinary object pointer)--对象指针")]),s._v(" "),a("p",[s._v("启用指针压缩:-XX:+UseCompressedOops("),a("strong",[s._v("默认开启")]),s._v(")，禁止指针压缩:-XX:-UseCompressedOops")])]),s._v(" "),a("h4",{attrs:{id:"为什么要进行指针压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要进行指针压缩"}},[s._v("#")]),s._v(" 为什么要进行指针压缩？")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("在64位平台的HotSpot中使用32位指针(实际存储用64位)，内存使用会多出1.5倍左右，使用较大指针在主内存和缓存之间移动数据，"),a("strong",[s._v("占用较大宽带，同时GC也会承受较大压力")])])]),s._v(" "),a("li",[a("p",[s._v("为了减少64位平台下内存的消耗，启用指针压缩功能")])]),s._v(" "),a("li",[a("p",[s._v("在jvm中，32位地址最大支持4G内存(2的32次方)，可以通过对对象指针的存入"),a("strong",[s._v("堆内存")]),s._v("时压缩编码、取出到"),a("strong",[s._v("cpu寄存器")]),s._v("后解码方式进行优化(对象指针在堆中是32位，在寄存器中是35位，2的35次方=32G)，使得jvm只用32位地址就可以支持更大的内存配置(小于等于32G)")])]),s._v(" "),a("li",[a("p",[s._v("堆内存小于4G时，不需要启用指针压缩，jvm会直接去除高32位地址，即使用低虚拟地址空间")])]),s._v(" "),a("li",[a("p",[s._v("堆内存大于32G时，压缩指针会失效，会强制使用64位(即8字节)来对java对象寻址，这就会出现1的问题，所以堆内存不要大于32G为好")])])])])}),[],!1,null,null,null);a.default=v.exports}}]);