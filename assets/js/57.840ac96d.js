(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{334:function(t,e,s){"use strict";s.r(e);var r=s(10),a=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"流程图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流程图"}},[t._v("#")]),t._v(" 流程图")]),t._v(" "),e("iframe",{staticStyle:{display:"block",width:"725px",height:"245px"},attrs:{id:"embed_dom",name:"embed_dom",frameborder:"0",src:"https://www.processon.com/embed/611f88760e3e745cf8fffbad"}}),t._v(" "),e("h2",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("它基于动态代理来实现")]),t._v("。默认地，如果使用接口的，用 JDK 提供的动态代理实现，如果没有接口，使用 CGLIB 实现。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("Spring 3.2 以后，spring-core 直接就把 CGLIB 和 ASM 的源码包括进来了")])])]),t._v(" "),e("li",[e("p",[t._v("Spring 的 IOC 容器和 AOP 都很重要，Spring AOP 需要依赖于 IOC 容器来管理。")])]),t._v(" "),e("li",[e("p",[t._v("Spring AOP 只能作用于 Spring 容器中的 Bean，它是使用纯粹的 Java 代码实现的，只能作用于 bean 的方法。")])]),t._v(" "),e("li",[e("p",[t._v("Spring 提供了 AspectJ 的支持，但只用到的AspectJ的切点解析和匹配。")])]),t._v(" "),e("li",[e("p",[t._v("Spring AOP 是基于代理实现的，在容器启动的时候需要生成代理实例，在方法调用上也会增加栈的深度，使得 Spring AOP 的性能不如 AspectJ 那么好。")])])]),t._v(" "),e("h2",{attrs:{id:"概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("pointcut")]),t._v("：切点，需要插入增强的连接点")]),t._v(" "),e("li",[e("code",[t._v("Joinpoint")]),t._v("：连接点，可以插入的增强位置，在spring中连接点为方法调用")]),t._v(" "),e("li",[e("code",[t._v("advice")]),t._v("：通知，描述如何增强")]),t._v(" "),e("li",[e("code",[t._v("aspect")]),t._v("：切面，通知和切点的结合")]),t._v(" "),e("li",[e("code",[t._v("Advisor")]),t._v("：封装"),e("code",[t._v("Joinpoint")]),t._v("和"),e("code",[t._v("advice")])])]),t._v(" "),e("h2",{attrs:{id:"使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),e("blockquote",[e("p",[t._v("spring中使用通过添加 "),e("code",[t._v("@EnableAspectJAutoProxy")]),t._v("即可开启")]),t._v(" "),e("p",[t._v("spring-boot中默认开启，2.0后"),e("code",[t._v("proxy-target-class")]),t._v("默认为"),e("code",[t._v("true")]),t._v("。即默认为cglib代理（不是接口或本身就是jdk代理的情况下）")])]),t._v(" "),e("h2",{attrs:{id:"源码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#源码"}},[t._v("#")]),t._v(" 源码")]),t._v(" "),e("h3",{attrs:{id:"主要类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主要类"}},[t._v("#")]),t._v(" 主要类")]),t._v(" "),e("ul",[e("li",[t._v("AspectJAutoProxyRegistrar\n"),e("ul",[e("li",[t._v("注入"),e("code",[t._v("AnnotationAwareAspectJAutoProxyCreator")])])])]),t._v(" "),e("li",[t._v("AnnotationAwareAspectJAutoProxyCreator：最核心的类，处理切面，生成代理对象\n"),e("ul",[e("li",[t._v("继承"),e("code",[t._v("AnnotationAwareAspectJAutoProxyCreator")]),t._v(" "),e("ul",[e("li",[t._v("继承"),e("code",[t._v("AbstractAdvisorAutoProxyCreator")]),t._v(" "),e("ul",[e("li",[t._v("继承"),e("code",[t._v("AbstractAutoProxyCreator")])])])])])])])]),t._v(" "),e("li",[t._v("BeanFactoryAspectJAdvisorsBuilder\n"),e("ul",[e("li",[t._v("构建所有"),e("code",[t._v("AspectJ")]),t._v("的"),e("code",[t._v("Advisor")])])])]),t._v(" "),e("li",[t._v("ReflectiveAspectJAdvisorFactory\n"),e("ul",[e("li",[t._v("获取"),e("code",[t._v("Pointcut")]),t._v("，"),e("code",[t._v("Advice")])])])]),t._v(" "),e("li",[t._v("DefaultAdvisorChainFactory\n"),e("ul",[e("li",[t._v("生成调用链")])])]),t._v(" "),e("li",[t._v("DefaultAopProxyFactory\n"),e("ul",[e("li",[t._v("创建"),e("code",[t._v("AopProxy")])])])]),t._v(" "),e("li",[t._v("JdkDynamicAopProxy\n"),e("ul",[e("li",[t._v("jdk动态代理对象生成")])])]),t._v(" "),e("li",[t._v("CglibAopProxy\n"),e("ul",[e("li",[t._v("cglib动态代理对象生成")])])])]),t._v(" "),e("h3",{attrs:{id:"主要流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主要流程"}},[t._v("#")]),t._v(" 主要流程")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("通过"),e("code",[t._v("@EnableAspectJAutoProxy")]),t._v("注解注入"),e("code",[t._v("AnnotationAwareAspectJAutoProxyCreator")])])]),t._v(" "),e("li",[e("p",[t._v("在类第一次实例化前解析并缓存所有切面，以及事务注解解析")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("AnnotationAwareAspectJAutoProxyCreator#postProcessBeforeInstantiation 在类初始化前调用\n\tshouldSkip  检查是否需要跳过\n\t\tfindCandidateAdvisors\t找所有候选的Advisor\n\t\t\tBeanFactoryAspectJAdvisorsBuilder#buildAspectJAdvisors 构建所有Advisor\n\t\t\t\tReflectiveAspectJAdvisorFactory#getAdvisors\n\t\t\t\t\tReflectiveAspectJAdvisorFactory#getPointcut\t\t封装成AspectJExpressionPointcut\n\t\t\t\t\t\tReflectiveAspectJAdvisorFactory#getAdvice\t\t根据不同的注解生成不同的Advice\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("blockquote",[e("p",[t._v("会在"),e("code",[t._v("ReflectiveAspectJAdvisorFactory#getAdvisorMethods")]),t._v("是进行排序。")]),t._v(" "),e("p",[e("code",[t._v("ReflectiveAspectJAdvisorFactory#adviceMethodComparator")]),t._v("先按照Around， Before，After， AfterReturning， AfterThrowing顺序排列，然后按照名称排列")])])]),t._v(" "),e("li",[e("p",[t._v("生成代理对象")]),t._v(" "),e("blockquote",[e("p",[t._v("在bean初始化完成后判断是否会生成代理对象")])]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("AnnotationAwareAspectJAutoProxyCreator#postProcessAfterInitialization\n\twrapIfNecessary  如果需要则生成代理对象\n\t\tgetAdvicesAndAdvisorsForBean  \t\t\t\t\t获取所有匹配的advice\n\t\t\tfindEligibleAdvisors      \t\t\t\t\t\t通过缓存获取所有advice\n      \tAopUtils.findAdvisorsThatCanApply  \t对所有advisors一顿matches\n      \tsortAdvisors \t\t\t\t\t\t\t\t\t\t\t\t对advice进行排序\n\t\tcreateProxy\t\t\t\t\t创建代理对象\n\t\t\tAdvisedSupport#getInterceptorsAndDynamicInterceptionAdvice 获取调用链\n         DefaultAdvisorChainFactory#getInterceptorsAndDynamicInterceptionAdvice\n         \t\tReflectiveMethodInvocation#proceed \t\t实际执行的方法，递归执行调用链\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br")])])])])])}),[],!1,null,null,null);e.default=a.exports}}]);