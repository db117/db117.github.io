(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{399:function(s,t,a){"use strict";a.r(t);var n=a(10),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"特别好用的二分查找法模板"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特别好用的二分查找法模板"}},[s._v("#")]),s._v(" 特别好用的二分查找法模板")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[s._v("题目地址")]),s._v(" "),t("th",{staticStyle:{"text-align":"left"}},[s._v("题解")])])]),s._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[t("a",{attrs:{href:"https://leetcode-cn.com/problems/search-insert-position/",target:"_blank",rel:"noopener noreferrer"}},[s._v("LeetCode 第 35 题：搜索插入位置"),t("OutboundLink")],1)]),s._v(" "),t("td",{staticStyle:{"text-align":"left"}},[t("a",{attrs:{href:"https://leetcode-cn.com/problems/search-insert-position/solution/te-bie-hao-yong-de-er-fen-cha-fa-fa-mo-ban-python-/",target:"_blank",rel:"noopener noreferrer"}},[s._v("特别好用的二分查找法模板（Python 代码、Java 代码）"),t("OutboundLink")],1)])])])]),s._v(" "),t("p",[s._v("分析：根据题意，结合题目给出的 4 个示例，不难分析出这个问题的等价表述如下。")]),s._v(" "),t("blockquote",[t("p",[s._v("1、如果目标值（严格）大于排序数组的最后一个数，返回这个排序数组的长度，否则进入第 2 点。")]),s._v(" "),t("p",[s._v("2、返回排序数组从左到右，大于或者等于目标值的第 1 个数的"),t("strong",[s._v("索引")]),s._v("。")])]),s._v(" "),t("p",[s._v("事实上，当给出数组中有很多数和目标值相等的时候，我们返回任意一个与之相等的数的索引值都可以，不过为了简单起见，也为了方便后面的说明，我们返回第 1 个符合题意的数的索引。")]),s._v(" "),t("p",[s._v("题目告诉你“排序数组”，其实就是在"),t("strong",[s._v("疯狂暗示你用二分查找法")]),s._v("。二分查找法的思想并不难，但写好一个二分法并不简单，就借着这道题为大家总结一下。")]),s._v(" "),t("h3",{attrs:{id:"一、传统二分查找法模板"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、传统二分查找法模板"}},[s._v("#")]),s._v(" 一、传统二分查找法模板")]),s._v(" "),t("p",[s._v("刚接触二分查找法的时候，我们可能会像下面这样写代码，我把这种写法容易出错的地方写在了注释里：")]),s._v(" "),t("p",[s._v("Java 代码：")]),s._v(" "),t("div",{staticClass:"language-Java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("searchInsert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" target"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" target"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" r "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" r"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" mid "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" r"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 等于的情况最简单，我们放在第 1 个分支进行判断")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("mid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" target"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" mid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("mid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" target"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 题目要我们返回大于或者等于目标值的第 1 个数的索引")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 此时 mid 一定不是所求的左边界，")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 此时左边界更新为 mid + 1")]),s._v("\n                l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 既然不会等于，此时 nums[mid] > target")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// mid 也一定不是所求的右边界")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 此时右边界更新为 mid - 1")]),s._v("\n                r "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 注意：一定得返回左边界 l，")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果返回右边界 r 提交代码不会通过")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 下面我尝试说明一下理由，如果你不太理解下面我说的，那是我的表达问题")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 【注意】建议你不要纠结这个问题，因为我马上介绍的二分法模板，可以避免对返回 l 和 r 的思考")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 理由是对于 [1,3,5,6]，target = 2，返回大于等于 target 的第 1 个数的索引，此时应该返回 1")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在上面的 while (l <= r) 退出循环以后，r < l，r = 0 ，l = 1")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 根据题意应该返回 l，")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果题目要求你返回小于等于 target 的所有数里最大的那个索引值，应该返回 r")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" l"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br")])]),t("p",[s._v("说明：如果你把二分查找法可以进行的条件写成 "),t("code",[s._v("while (l <= r)")]),s._v(" 的话，在写最后一句 "),t("code",[s._v("return")]),s._v(" 的时候，如果你不假思索，把左边界 "),t("code",[s._v("l")]),s._v(" 返回回去，可能误打误撞，你写对了。但是事实上，返回 "),t("code",[s._v("l")]),s._v(" 是有一定道理的，如果题目换一种问法，你可能就要返回右边界 "),t("code",[s._v("r")]),s._v("，这句话不太理解没有关系，我也不打算讲得很清楚，因为太绕了，这不是我要说的重点。")]),s._v(" "),t("blockquote",[t("p",[s._v("传统二分查找法的问题在于，当退出 "),t("code",[s._v("while")]),s._v(" 循环的时候，应该返回左边界还是右边界比较容易出错。")])]),s._v(" "),t("p",[s._v("那么是不是可以回避这个问题呢？答案是肯定的，并且只要你掌握了下面我介绍的“神奇的”二分查找法模板，你会屡试不爽的。")]),s._v(" "),t("h3",{attrs:{id:"二、-神奇的-二分查找法模板"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、-神奇的-二分查找法模板"}},[s._v("#")]),s._v(" 二、“神奇的”二分查找法模板")]),s._v(" "),t("p",[s._v("在一些资料中，你可能看过别人写二分查找法，把循环可以进行的条件写成 "),t("code",[s._v("while (l < r)")]),s._v(" ，当时你是不是跟我一样有疑问，咦？当左右边界一样的时候，那个数岂不是会被漏掉。但是我要告诉你，这样写是最好的，这是最好二分查找法“模板”的一部分。")]),s._v(" "),t("blockquote",[t("p",[s._v("理由很简单，写 "),t("code",[s._v("while (l < r)")]),s._v(" 的时候，退出循环时，左边界等于右边界，因此你不必纠结要返回 "),t("code",[s._v("l")]),s._v(" 还是 "),t("code",[s._v("r")]),s._v(" ，此时返回 "),t("code",[s._v("l")]),s._v(" 或者 "),t("code",[s._v("r")]),s._v(" 都是可以的。")])]),s._v(" "),t("p",[s._v("二分查找法之所以高效，是因为它利用了数组有序的特点，在每一次的搜索过程中，都可以排除将近一半的数，"),t("strong",[s._v("使得搜索区间越来越小，直到区间成为一个数")]),s._v("。不过这里有个细节要注意：")]),s._v(" "),t("blockquote",[t("p",[s._v("1、"),t("strong",[s._v("如果你确定你要找的数一定在左边界和右边界所表示的区间里出现")]),s._v("，那么可以放心地返回 "),t("code",[s._v("l")]),s._v(" 或者 "),t("code",[s._v("r")]),s._v("；")]),s._v(" "),t("p",[s._v("2、如果你不确定你要找的数一定在左边界和右边界所表示的区间里出现，那么也没有关系，只要在退出循环以后，再针对 "),t("code",[s._v("nums[l]")]),s._v(" 或者 "),t("code",[s._v("nums[r]")]),s._v(" （此时 "),t("code",[s._v("nums[l] == nums[r]")]),s._v("）单独作一次判断，看它是不是你要找的数即可。")])]),s._v(" "),t("p",[s._v("写 "),t("code",[s._v("while (l < r)")]),s._v(" 可以避免你对返回左边界还是右边界的讨论。下面给出这道问题，使用 "),t("code",[s._v("while (l < r)")]),s._v(" 模板写法的参考代码。")]),s._v(" "),t("p",[s._v("Python 代码：")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("searchInsert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" target"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 返回大于等于 target 的索引，有可能是最后一个")]),s._v("\n        size "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" size "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n        l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果 target 比 nums里所有的数都大，则最后一个数的索引 + 1 就是候选值，因此，右边界应该是数组的长度")]),s._v("\n        r "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" size\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 二分的逻辑一定要写对，否则会出现死循环或者数组下标越界")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" r"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            mid "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("r "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" l"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("mid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" target"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n                r "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" l\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("p",[s._v("Java 代码：")]),s._v(" "),t("div",{staticClass:"language-Java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Solution")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("searchInsert")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" target"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("target "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" len"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" left "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" len "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("left "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" mid "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" left "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" left"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("mid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" target"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                left "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                right "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" right"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("p",[s._v("不过写出这段代码还是有一定“技巧”的。")]),s._v(" "),t("h3",{attrs:{id:"三、技巧、调试方法和注意事项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、技巧、调试方法和注意事项"}},[s._v("#")]),s._v(" 三、技巧、调试方法和注意事项")]),s._v(" "),t("p",[s._v("1、首先，得弄清楚取中点的方式。")]),s._v(" "),t("p",[s._v("（1）当 "),t("code",[s._v("l")]),s._v(" 和 "),t("code",[s._v("r")]),s._v(" 是很大的整数的时候，你写 "),t("code",[s._v("int mid = (l + r) / 2;")]),s._v(" 这里 "),t("code",[s._v("l + r")]),s._v(" 就有可能超过 "),t("code",[s._v("int")]),s._v(" 类型能表示的最大值，因此使用 "),t("code",[s._v("mid = l + (r - l) // 2")]),s._v(" 可以避免这种情况。")]),s._v(" "),t("p",[s._v("事实上 "),t("code",[s._v("mid = l + (r - l) // 2")]),s._v(" 在 "),t("code",[s._v("r")]),s._v(" 很大，并 "),t("code",[s._v("l")]),s._v(" 是负数且很小的时候， "),t("code",[s._v("r - l")]),s._v(" 也有可能超过 "),t("code",[s._v("int")]),s._v(" 类型能表示的最大值，只不过一般情况下 "),t("code",[s._v("l")]),s._v(" 和 "),t("code",[s._v("r")]),s._v(" 表示的是数组索引值，"),t("code",[s._v("l")]),s._v(" 是非负数，因此 "),t("code",[s._v("r - l")]),s._v(" 溢出的可能性很小。")]),s._v(" "),t("p",[s._v("（2）另外还要注意，当数组的元素个数是偶数的时候，中位数有左中位数和右中位数之分：")]),s._v(" "),t("ul",[t("li",[s._v("使用 "),t("code",[s._v("mid = l + (r - l) // 2")]),s._v(" 得到左中位数的索引；")]),s._v(" "),t("li",[s._v("使用 "),t("code",[s._v("mid = l + (r - l + 1) // 2")]),s._v(" 得到右中位数的索引。")])]),s._v(" "),t("p",[s._v("当数组的元素个数是奇数的时候，二者都能选到最中间的那个中位数。")]),s._v(" "),t("p",[s._v("我们使用一个具体的例子来验证这件事情，当索引 "),t("code",[s._v("l = 3")]),s._v("，索引 "),t("code",[s._v("r = 4")]),s._v(" 的时候，左中位数是索引 "),t("code",[s._v("l")]),s._v("，右中位数是索引 "),t("code",[s._v("r")]),s._v("，这是因为：")]),s._v(" "),t("p",[t("code",[s._v("mid = l + (r - l) // 2 = 3 + (4 - 3) // 2 = 3 + 0 = 3")]),s._v("，")]),s._v(" "),t("p",[t("code",[s._v("mid = l + (r - l + 1) // 2 = 3 + (4 - 3 + 1) // 2 = 3 + 1 = 4")]),s._v("。")]),s._v(" "),t("blockquote",[t("p",[s._v("记忆方法："),t("strong",[s._v("(r - l) 不加 1 选左中位数，加 1 选右中位数")]),s._v("。")])]),s._v(" "),t("p",[s._v("那么，什么时候使用左中位数，什么时候使用右中位数呢？这就要看分支的逻辑了。")]),s._v(" "),t("p",[s._v("2、编写分支的逻辑循序先写“排除逻辑”所在的分支。")]),s._v(" "),t("p",[t("strong",[s._v("这里介绍很重要的一个技巧")]),s._v("：先考虑能把“中位数”排除在外的逻辑，而不能排除“中位数”的逻辑放在 "),t("code",[s._v("else")]),s._v(" 分支里，这样做的理由有 2 点：")]),s._v(" "),t("blockquote",[t("p",[s._v("（1）可以排除“中位数”的逻辑，通常比较好想，但并不绝对，这一点视情况而定；")]),s._v(" "),t("p",[s._v("（2）分支条数变成 2 条，比原来 3 个分支要考虑的情况少，即"),t("strong",[s._v("不用单独考虑中位数是否满足题意")]),s._v("，"),t("strong",[s._v("因为退出循环的时候，左右区间压缩成一个数（索引）的时候，这个索引表示的数要么满足题意，要么不满足题意，而不必在二分逻辑中单独做判断")]),s._v("（这一点很重要，希望读者结合具体例子仔细体会）。")])]),s._v(" "),t("p",[s._v("以本题为例，最开始我们就分析了要求我们找到“大于或者等于目标值的第 1 个数的"),t("strong",[s._v("索引")]),s._v("”。所以对于这道题而言：")]),s._v(" "),t("p",[s._v("（1）如果中位数小于目标值，就应该被排除，左边界 "),t("code",[s._v("l")]),s._v(" 就至少是 "),t("code",[s._v("mid + 1")]),s._v("；")]),s._v(" "),t("p",[s._v("（2）如果中位数大于等于目标值，还不能够肯定它就是我们要找的数，因为要找的是等于目标值的第 1 个数的"),t("strong",[s._v("索引")]),s._v("，"),t("strong",[s._v("中位数以及中位数的左边都有可能是符合题意的数")]),s._v("，因此右边界就不能把 "),t("code",[s._v("mid")]),s._v(" 排除，因此右边界 "),t("code",[s._v("r")]),s._v(" 至多是 "),t("code",[s._v("mid")]),s._v("，此时右边界不向左边收缩。")]),s._v(" "),t("p",[t("strong",[s._v("而下一点就更关键了")]),s._v("。")]),s._v(" "),t("p",[s._v("3、根据分支编写的情况，选择使用左中位数还是右中位数。")]),s._v(" "),t("p",[s._v("先写分支，根据分支的逻辑选中位数，选左中位数还是右中位数，这要做的理由是为了防止出现死循环。")]),s._v(" "),t("blockquote",[t("p",[s._v("死循环就容易发生在区间元素只有 2 个时候，此时中位数的选择尤为关键。")])]),s._v(" "),t("p",[s._v("为了避免出现死循环，我们需要确保：")]),s._v(" "),t("blockquote",[t("p",[s._v("1、如果分支的逻辑，在选择左边界的时候，不能排除中位数，那么中位数就选“右中位数”，只有这样区间才会收缩，否则进入死循环；")]),s._v(" "),t("p",[s._v("2、同理，如果分支的逻辑，在选择右边界的时候，不能排除中位数，那么中位数就选“左中位数”，只有这样区间才会收缩，否则进入死循环。")])]),s._v(" "),t("p",[s._v("上面的规则说起来很绕，可以暂时跳过，不要去记它，我写的时候都晕。理解上面的这个规则可以通过具体的例子：")]),s._v(" "),t("p",[s._v("针对以上规则的第 1 点：如果分支的逻辑，在选择左边界的时候不能排除中位数，例如：")]),s._v(" "),t("p",[s._v("Python 伪代码：")]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" r"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不妨先写左中位数，看看你的分支会不会让你代码出现死循环，从而调整")]),s._v("\n    mid "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("r "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" l"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 业务逻辑代码")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("check"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 选择右边界的时候，可以排除中位数")]),s._v("\n        r "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 选择左边界的时候，不能排除中位数")]),s._v("\n        l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("ul",[t("li",[t("strong",[s._v("在区间中的元素只剩下 2 个时候")]),s._v("，例如："),t("code",[s._v("l = 3")]),s._v("，"),t("code",[s._v("r = 4")]),s._v("。此时"),t("strong",[s._v("左中位数就是左边界")]),s._v("，如果你的逻辑执行到 "),t("code",[s._v("l = mid")]),s._v(" 这个分支，"),t("strong",[s._v("且你选择的中位数是左中位数，此时左边界就不会得到更新，区间就不会再收缩（理解这句话是关键），从而进入死循环")]),s._v("；")]),s._v(" "),t("li",[s._v("为了避免出现死循环，你需要选择中位数是右中位数，当逻辑执行到 "),t("code",[s._v("l = mid")]),s._v(" 这个分支的时候，因为你选择了右中位数，让逻辑可以转而执行到 "),t("code",[s._v("r = mid - 1")]),s._v(" 让区间收缩，最终成为 1 个数，退出 "),t("code",[s._v("while")]),s._v(" 循环。")])]),s._v(" "),t("p",[s._v("上面的这种情况如果你理解了，就可以类似地理解提出的规则的第 2 点。")]),s._v(" "),t("blockquote",[t("p",[s._v("按照我的经验，一开始编码的时候，稍不注意就很容易出现死循环，不过没有关系，你可以你的代码中写上一些输出语句，就容易理解“在区间元素只有 2 个的时候容易出现死循环”。具体编码调试的细节，可以参考我在 "),t("a",{attrs:{href:"https://leetcode-cn.com/problems/sqrtx/",target:"_blank",rel:"noopener noreferrer"}},[s._v("「力扣」第 69 题：x 的平方根"),t("OutboundLink")],1),s._v("的题解"),t("a",{attrs:{href:"https://leetcode-cn.com/problems/sqrtx/solution/er-fen-cha-zhao-niu-dun-fa-python-dai-ma-by-liweiw/",target:"_blank",rel:"noopener noreferrer"}},[s._v("《二分查找 + 牛顿法（Python 代码、Java 代码）》"),t("OutboundLink")],1),s._v(" 。")])]),s._v(" "),t("h3",{attrs:{id:"四、使用总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、使用总结"}},[s._v("#")]),s._v(" 四、使用总结")]),s._v(" "),t("p",[s._v("总结一下，我爱用这个模板的原因、技巧、优点和注意事项：")]),s._v(" "),t("blockquote",[t("p",[s._v("1、原因：无脑地写 "),t("code",[s._v("while l < r:")]),s._v(" ，这样你就不用判断，在退出循环的时候你应该返回 "),t("code",[s._v("l")]),s._v(" 还是 "),t("code",[s._v("r")]),s._v("；")]),s._v(" "),t("p",[s._v("2、技巧：先写分支逻辑，并且先写排除中位数的逻辑分支（因为容易想到），再根据分支的情况选择使用左中位数还是右中位数；")]),s._v(" "),t("p",[s._v("3、优点：分支条数只有 2 条，代码执行效率更高，不用单独判断中位数是否符合题目要求，"),t("strong",[s._v("写分支的逻辑的目的是尽量排除更多的候选元素")]),s._v("，而判断中位数是否符合题目要求我们放在最后进行，这就是第 5 点；")]),s._v(" "),t("p",[s._v("4、注意事项 1：左中位数还是右中位数选择的标准根据分支的逻辑而来，标准是每一次循环都应该让区间收缩，在区间只剩下 2 个元素的时候，为了避免死循环发生，选择正确的中位数类型。如果你实在很晕，不防就使用有 2 个元素的测试用例，就能明白其中的原因，另外在代码出现死循环的时候，建议你可以将左边界、右边界、你选择的中位数的值，还有分支逻辑都打印输出一下，出现死循环的原因就一目了然了；")]),s._v(" "),t("p",[s._v("5、注意事项 2：如果能确定要找的数就在候选区间里，那么退出循环的时候，区间最后收缩成为 1 个数后，直接把这个数返回即可；如果你要找的数有可能不在候选区间里，区间最后收缩成为 1 个数后，还要单独判断一下这个数是否符合题意；")])]),s._v(" "),t("p",[s._v("最后给出两个模板，大家看的时候看注释，而不必也无需记忆它们，最好的理解这个模板的方法还是应用它。")]),s._v(" "),t("p",[s._v("Python 伪代码1： 分支是右区间不收缩的时候，选中位数选左中位数，因为如果你选右中位数，会出现死循环。")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("binary_search_1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" r"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当分支逻辑不能排除右边界的时候选择左中位数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果选择右中位数，当区间只剩下 2 个元素的时候，")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一旦进入 r = mid 这个分支，右边界不会收缩，代码进入死循环")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" r"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        mid "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("r "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" l"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" check"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 先写可以排除中位数的逻辑")]),s._v("\n            l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 右边界不能排除")]),s._v("\n            r "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 退出循环的时候，视情况，是否需要单独判断 l （或者 r）这个索引表示的元素是否符合题意")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[s._v("Python 伪代码2：分支是左区间不收缩的时候，选中位数选右中位数，因为如果你选左中位数，会出现死循环。")]),s._v(" "),t("div",{staticClass:"language-Python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("binary_search_2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("l"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" r"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 当分支逻辑不能排除左边界的时候选择右中位数")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 如果选择做中位数，当区间只剩下 2 个元素的时候，")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 一旦进入 l = mid 这个分支，左边界不会收缩，代码进入死循环")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" r"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        mid "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("r "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" check"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mid"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 先写可以排除中位数的逻辑")]),s._v("\n            r "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 左边界不能排除")]),s._v("\n            l "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" mid\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 退出循环的时候，视情况，是否需要单独判断 l （或者 r）这个索引表示的元素是否符合题意")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br")])]),t("p",[t("strong",[s._v("说明")]),s._v("：我写的时候，一般是先默认将中位数写成左中位数，再根据分支的情况，看看是否有必要调整成右中位数，即是不是要在 "),t("code",[s._v("(r - l)")]),s._v(" 这个括号里面加 1 。")]),s._v(" "),t("p",[s._v("我想我应该是成功地把你绕晕了，在此建议您不妨多做几道使用“二分查找法”解决的问题，用一下我说的这个模板，"),t("strong",[s._v("在发现问题的过程中，体会这个模板好用的地方，相信你一定会和我一样爱上这个模板的")]),s._v("。")]),s._v(" "),t("p",[s._v("转载:"),t("a",{attrs:{href:"https://www.liwei.party/2019/06/17/leetcode-solution-new/search-insert-position/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://liwei.party/2019/06/17/leetcode-solution-new/search-insert-position/"),t("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=e.exports}}]);