(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{410:function(a,s,e){"use strict";e.r(s);var n=e(27),t=Object(n.a)({},(function(){var a=this,s=a.$createElement,e=a._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("iframe",{staticStyle:{display:"block",width:"725px",height:"245px"},attrs:{id:"embed_dom",name:"embed_dom",frameborder:"0",src:"https://www.processon.com/embed/60e5834f6376892c1ec611af"}}),a._v(" "),e("h2",{attrs:{id:"list"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[a._v("#")]),a._v(" List")]),a._v(" "),e("h3",{attrs:{id:"arraylist"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#arraylist"}},[a._v("#")]),a._v(" ArrayList")]),a._v(" "),e("blockquote",[e("p",[e("code",[a._v("java.util.ArrayList")])]),a._v(" "),e("p",[a._v("最常用的集合,实现方式为数组")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class ArrayList<E> extends AbstractList<E>\n        implements List<E>, RandomAccess, Cloneable, java.io.Serializable\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("ul",[e("li",[e("p",[a._v("使用"),e("code",[a._v("transient Object[] elementData;")]),a._v("来保存数据,默认大小为10")])]),a._v(" "),e("li",[e("p",[a._v("每一次扩容为之前的1.5倍"),e("code",[a._v("int newCapacity = oldCapacity + (oldCapacity >> 1);")])])]),a._v(" "),e("li",[e("p",[a._v("标记为java.util.RandomAccess,可进行随机访问")])]),a._v(" "),e("li",[e("p",[a._v("删除元素需要调用 "),e("code",[a._v("System.arraycopy()")]),a._v(" 将 index+1 后面的元素都复制到 index 位置上，该操作的时间复杂度为 O(N)")])]),a._v(" "),e("li",[e("p",[a._v("subList")]),a._v(" "),e("blockquote",[e("p",[a._v("访问时通过从定向index来实现,添加修改会改变原来的List")])])]),a._v(" "),e("li",[e("p",[e("code",[a._v("java.util.Arrays.ArrayList")]),a._v("为"),e("code",[a._v("Arrays")]),a._v("的实现,不能add,remove.但是可以get,set")])])]),a._v(" "),e("h3",{attrs:{id:"linkedlist"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linkedlist"}},[a._v("#")]),a._v(" LinkedList")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class LinkedList<E>\n    extends AbstractSequentialList<E>\n    implements List<E>, Deque<E>, Cloneable, java.io.Serializable\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("blockquote",[e("p",[e("code",[a._v("java.util.LinkedList")])]),a._v(" "),e("p",[a._v("相比ArrayList多实现了java.util.Deque接口")]),a._v(" "),e("p",[a._v("使用双向链表来保存数据")])]),a._v(" "),e("h3",{attrs:{id:"vector-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vector-线程安全"}},[a._v("#")]),a._v(" Vector(线程安全)")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class Vector<E>\n    extends AbstractList<E>\n    implements List<E>, RandomAccess, Cloneable, java.io.Serializable\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("blockquote",[e("p",[e("code",[a._v("java.util.Vector")])]),a._v(" "),e("p",[a._v("跟java.util.ArrayList类似,不过接口通过synchronized来保证并发安全")])]),a._v(" "),e("ul",[e("li",[a._v("扩容直接翻倍")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("// 容量满了后,如果设置了capacityIncrement这按照设置的数量进行增加,否则翻倍\nint newCapacity = oldCapacity + ((capacityIncrement > 0) ?\n                                 capacityIncrement : oldCapacity);\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("h3",{attrs:{id:"stack-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#stack-线程安全"}},[a._v("#")]),a._v(" Stack(线程安全)")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class Stack<E> extends Vector<E> \n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("blockquote",[e("p",[e("code",[a._v("java.util.Stack")])]),a._v(" "),e("p",[a._v("直接继承自"),e("code",[a._v("java.util.Vector")])]),a._v(" "),e("p",[a._v("实现stack数据结构")])]),a._v(" "),e("h3",{attrs:{id:"copyonwritearraylist-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#copyonwritearraylist-线程安全"}},[a._v("#")]),a._v(" CopyOnWriteArrayList(线程安全)")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class CopyOnWriteArrayList<E>\n    implements List<E>, RandomAccess, Cloneable, java.io.Serializable \n    \n    // 不存在才加入\n    // 其他 list 多的 api \n    public boolean addIfAbsent(E e)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("blockquote",[e("p",[e("code",[a._v("java.util.concurrent.CopyOnWriteArrayList")])])]),a._v(" "),e("ul",[e("li",[a._v("和ArrayList一样，其底层数据结构也是数组，加上transient不让其被序列化，加上volatile修饰来保证多线程下的其可见性和有序性")]),a._v(" "),e("li",[a._v("CopyOnWriteArrayList适合于多线程场景下使用，其采用读写分离的思想，读操作不上锁，写操作上锁，且写操作效率较低")]),a._v(" "),e("li",[a._v("CopyOnWriteArrayList基于fail-safe机制，每次修改都会在原先基础上复制一份，修改完毕后在进行替换")]),a._v(" "),e("li",[a._v("CopyOnWriteArrayList在1.8中采用的是ReentrantLock进行上锁。jdk11中采用的是synchronized进行加锁")]),a._v(" "),e("li",[e("strong",[a._v("不能保证实时一致性")]),a._v("，只能保证最终一致性")]),a._v(" "),e("li",[a._v("迭代器使用数组快照。")])]),a._v(" "),e("h2",{attrs:{id:"map"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[a._v("#")]),a._v(" map")]),a._v(" "),e("h3",{attrs:{id:"hashmap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[a._v("#")]),a._v(" HashMap")]),a._v(" "),e("blockquote",[e("p",[a._v("最常用的map,使用拉链发解决 hash 冲突")]),a._v(" "),e("p",[a._v("在 1.8 后链表长度过长会转换为红黑树")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class HashMap<K,V> extends AbstractMap<K,V>\n    implements Map<K,V>, Cloneable, Serializable \n    \n   \n static final int DEFAULT_INITIAL_CAPACITY = 1 << 4;// 默认容量\n static final float DEFAULT_LOAD_FACTOR = 0.75f;// 扩容阈值\n static final int TREEIFY_THRESHOLD = 8;// 链表改红黑树阈值\n static final int UNTREEIFY_THRESHOLD = 6;// 红黑树改链表阈值\n \n transient Node<K,V>[] table;// 存数据的数组\n transient int size;// map的数量\n transient int modCount;// 线程不安全是.快速失败\n \n static class Node<K,V> implements Map.Entry<K,V> {\n        final int hash;//对key的hashcode值进行hash运算后得到的值，存储在Entry，避免重复计算\n        final K key;\n        V value;\n        Node<K,V> next;//存储指向下一个Entry的引用，单链表结构\n }\n \n // 高低位异或,减小冲突\n static final int hash(Object key) {\n        int h;\n        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br"),e("span",{staticClass:"line-number"},[a._v("22")]),e("br"),e("span",{staticClass:"line-number"},[a._v("23")]),e("br"),e("span",{staticClass:"line-number"},[a._v("24")]),e("br"),e("span",{staticClass:"line-number"},[a._v("25")]),e("br")])]),e("h3",{attrs:{id:"treemap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#treemap"}},[a._v("#")]),a._v(" TreeMap")]),a._v(" "),e("blockquote",[e("p",[a._v("TreeMap的实现是红黑树算法的实现")]),a._v(" "),e("p",[a._v("为有序map")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class TreeMap<K,V>\n    extends AbstractMap<K,V>\n    implements NavigableMap<K,V>, Cloneable, java.io.Serializable\n    \n    // 重要属性\n    // 比较器，因为TreeMap是有序的\n    private final Comparator<? super K> comparator;\n    //TreeMap红-黑节点，为TreeMap的内部类\n    private transient Entry<K,V> root = null;\n    //容器大小\n    private transient int size = 0;\n    //TreeMap修改次数\n    private transient int modCount = 0;\n    //红黑树的节点颜色--红色\n    private static final boolean RED = false;\n    //红黑树的节点颜色--黑色\n    private static final boolean BLACK = true;\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br")])]),e("h3",{attrs:{id:"hashtable-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashtable-线程安全"}},[a._v("#")]),a._v(" Hashtable(线程安全)")]),a._v(" "),e("blockquote",[e("p",[a._v("很古老的线程安全的map")]),a._v(" "),e("p",[a._v("可以简单粗暴的理解为对 hashmap 的修改方法加锁")]),a._v(" "),e("p",[a._v("推荐使用 "),e("code",[a._v("java.util.concurrent.ConcurrentHashMap")])])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class Hashtable<K,V>\n    extends Dictionary<K,V>\n    implements Map<K,V>, Cloneable, java.io.Serializable\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("h3",{attrs:{id:"identityhashmap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#identityhashmap"}},[a._v("#")]),a._v(" IdentityHashMap")]),a._v(" "),e("blockquote",[e("p",[e("code",[a._v("Hashmap")]),a._v(" 使用 equals 来比较是否相等,而"),e("code",[a._v("IdentityHashMap")]),a._v("使用 ==")]),a._v(" "),e("p",[e("strong",[a._v("不是Map的通用实现")]),a._v("，它有意违反了Map的常规协定。并且IdentityHashMap允许key和value都为null")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class IdentityHashMap<K,V>\n    extends AbstractMap<K,V>\n    implements Map<K,V>, java.io.Serializable, Cloneable\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("h3",{attrs:{id:"linkedhashmap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashmap"}},[a._v("#")]),a._v(" LinkedHashMap")]),a._v(" "),e("blockquote",[e("p",[a._v("继承自"),e("code",[a._v("HashMap")]),a._v(",添加双向链表来保证迭代循序")]),a._v(" "),e("p",[a._v("通过重写 newNode 和 newTreeNode 来说实现添加数据放入队尾")]),a._v(" "),e("p",[a._v("可扩展实现 LRU 缓存")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class LinkedHashMap<K,V>\n    extends HashMap<K,V>\n    implements Map<K,V>\n    \n    // 双端列表头\n    transient LinkedHashMap.Entry<K,V> head;\n\n    // 双端列表尾\n    transient LinkedHashMap.Entry<K,V> tail;\n\n\t\t// 链表顺序：{@code true}表示访问顺序，{@code false}表示插入顺序。\n    final boolean accessOrder;\n\t\t\n\t\t// 扩展方法,可以实现 LRU 缓存\n\t\t// 返回 true 就会在插入数据的时候删除最老的 node\n    protected boolean removeEldestEntry(Map.Entry<K,V> eldest) {\n        return false;\n    }\n\n\t\t// 对 hashmap 中下面三个方法进行重写\n    // Callbacks to allow LinkedHashMap post-actions\n    // accessOrder 为 true 时访问数据时会把  node 移动到链表尾部\n    void afterNodeAccess(Node<K,V> p) { }\n    // 符合条件会删除最老的 node\n    void afterNodeInsertion(boolean evict) { }\n    // 把 node 移动到队列尾部\n    void afterNodeRemoval(Node<K,V> p) { }\n\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br"),e("span",{staticClass:"line-number"},[a._v("22")]),e("br"),e("span",{staticClass:"line-number"},[a._v("23")]),e("br"),e("span",{staticClass:"line-number"},[a._v("24")]),e("br"),e("span",{staticClass:"line-number"},[a._v("25")]),e("br"),e("span",{staticClass:"line-number"},[a._v("26")]),e("br"),e("span",{staticClass:"line-number"},[a._v("27")]),e("br"),e("span",{staticClass:"line-number"},[a._v("28")]),e("br")])]),e("h3",{attrs:{id:"weakhashmap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#weakhashmap"}},[a._v("#")]),a._v(" WeakHashMap")]),a._v(" "),e("blockquote",[e("p",[a._v("主要是用在内存敏感的系统中,当缓存使用")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class WeakHashMap<K,V>\n    extends AbstractMap<K,V>\n    implements Map<K,V> \n    \n    // 准备被 gc 掉的key放入到队列中\n    private final ReferenceQueue<Object> queue = new ReferenceQueue<>();\n    \n    // 每一次操作时删除掉在队列中的 key\n    private void expungeStaleEntries() {}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br")])]),e("h3",{attrs:{id:"enummap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#enummap"}},[a._v("#")]),a._v(" EnumMap")]),a._v(" "),e("blockquote",[e("p",[a._v("key 必须为"),e("code",[a._v("Eunm")]),a._v("的map")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class EnumMap<K extends Enum<K>, V> extends AbstractMap<K, V>\n    implements java.io.Serializable, Cloneable\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("h3",{attrs:{id:"concurrenthashmap-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-线程安全"}},[a._v("#")]),a._v(" ConcurrentHashMap(线程安全)")]),a._v(" "),e("blockquote",[e("p",[a._v("最常用的线程安全map，主要结构跟 "),e("code",[a._v("hashmap")]),a._v("差不多。")]),a._v(" "),e("p",[a._v("synchronized 只锁定当前链表或红⿊⼆叉树的⾸节点，这样只要 hash 不冲突，就不会产⽣并发，效率⼜提升 N 倍。")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class ConcurrentHashMap<K,V> extends AbstractMap<K,V>\n    implements ConcurrentMap<K,V>, Serializable \n    \n// node数组最大容量：2^30=1073741824\nprivate static final int MAXIMUM_CAPACITY = 1 << 30;\n// 默认初始值，必须是2的幕数\nprivate static final int DEFAULT_CAPACITY = 16\n//数组可能最大值，需要与toArray（）相关方法关联\nstatic final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8;\n//并发级别，遗留下来的，为兼容以前的版本 在序列话时使用\nprivate static final int DEFAULT_CONCURRENCY_LEVEL = 16;\nprivate static final float LOAD_FACTOR = 0.75f;// 负载因子\nstatic final int TREEIFY_THRESHOLD = 8;// 链表转红黑树阀值,> 8 链表转换为红黑树\n//树转链表阀值，小于等于6（tranfer时，lc、hc=0两个计数器分别++记录原bin、新binTreeNode数量，<=UNTREEIFY_THRESHOLD 则untreeify(lo)）\nstatic final int UNTREEIFY_THRESHOLD = 6;\n// 需要转换红黑树的最小阈值 \nstatic final int MIN_TREEIFY_CAPACITY = 64;\n// 2^15-1，help resize的最大线程数\nprivate static final int MAX_RESIZERS = (1 << (32 - RESIZE_STAMP_BITS)) - 1;\n// 32-16=16，sizeCtl中记录size大小的偏移量\nprivate static final int RESIZE_STAMP_SHIFT = 32 - RESIZE_STAMP_BITS\ntransient volatile Node<K,V>[] table;//存放node的数组\nprivate transient volatile Node<K,V>[] nextTable;// 仅仅在扩容是非空\n/*控制标识符，用来控制table的初始化和扩容的操作，不同的值有不同的含义\n *当为负数时：-1代表正在初始化，-N代表有N-1个线程正在 进行扩容\n *当为0时：代表当时的table还没有被初始化\n *当为正数时：表示初始化或者下一次进行扩容的大小\nprivate transient volatile int sizeCtl;\n\n// 当当前操作节点正在扩容时辅助扩容\nfinal Node<K,V>[] helpTransfer(Node<K,V>[] tab, Node<K,V> f) {}\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br"),e("span",{staticClass:"line-number"},[a._v("22")]),e("br"),e("span",{staticClass:"line-number"},[a._v("23")]),e("br"),e("span",{staticClass:"line-number"},[a._v("24")]),e("br"),e("span",{staticClass:"line-number"},[a._v("25")]),e("br"),e("span",{staticClass:"line-number"},[a._v("26")]),e("br"),e("span",{staticClass:"line-number"},[a._v("27")]),e("br"),e("span",{staticClass:"line-number"},[a._v("28")]),e("br"),e("span",{staticClass:"line-number"},[a._v("29")]),e("br"),e("span",{staticClass:"line-number"},[a._v("30")]),e("br"),e("span",{staticClass:"line-number"},[a._v("31")]),e("br")])]),e("ul",[e("li",[a._v("使用"),e("code",[a._v("synchronized")]),a._v("锁住链表头或红黑树根节点")]),a._v(" "),e("li",[a._v("key 和 value 都不容许为 null")]),a._v(" "),e("li",[a._v("Nod节点中value和next都用volatile修饰，保证并发的可见性")])]),a._v(" "),e("h3",{attrs:{id:"concurrentskiplistmap-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concurrentskiplistmap-线程安全"}},[a._v("#")]),a._v(" ConcurrentSkipListMap(线程安全)")]),a._v(" "),e("blockquote",[e("p",[a._v("提供了一种线程安全的并发访问的排序映射表。内部是SkipList（跳表）结构实现，在理论上能够O(log(n))时间内完成查找、插入、删除操作。")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class ConcurrentSkipListMap<K,V> extends AbstractMap<K,V>\n    implements ConcurrentNavigableMap<K,V>, Cloneable, Serializable\n    \n    // 使用 node 来保存数据，不参与构建跳表结构\n    // 有序的链表\n     static final class Node<K,V> {\n        final K key; \n        V val;\n        Node<K,V> next;\n    }\n    \n    // 实现跳表结构\n    static final class Index<K,V> {\n        final Node<K,V> node; // 实际保存的数据\n        final Index<K,V> down;// 指向下一级\n        Index<K,V> right;\t\t\t// 指向右边链表\n    }\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br")])]),e("h2",{attrs:{id:"set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[a._v("#")]),a._v(" set")]),a._v(" "),e("h3",{attrs:{id:"hashset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hashset"}},[a._v("#")]),a._v(" HashSet")]),a._v(" "),e("blockquote",[e("p",[a._v("就是封装 "),e("code",[a._v("Hashmap")]),a._v("，value 为一个空对象")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class HashSet<E>\n    extends AbstractSet<E>\n    implements Set<E>, Cloneable, java.io.Serializable\n    \n    // 一个特殊的构造器，dummy 主要是区分其他构造器\n    // 使用 LinkedHashMap 来保存数据\n    HashSet(int initialCapacity, float loadFactor, boolean dummy) {\n        map = new LinkedHashMap<>(initialCapacity, loadFactor);\n    }\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br")])]),e("h3",{attrs:{id:"treeset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#treeset"}},[a._v("#")]),a._v(" TreeSet")]),a._v(" "),e("blockquote",[e("p",[a._v("默认使用 "),e("code",[a._v("TreeMap")]),a._v("，可以是用其他 "),e("code",[a._v("java.util.NavigableMap")])])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class TreeSet<E> extends AbstractSet<E>\n    implements NavigableSet<E>, Cloneable, java.io.Serializable\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("h3",{attrs:{id:"linkedhashset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linkedhashset"}},[a._v("#")]),a._v(" LinkedHashSet")]),a._v(" "),e("blockquote",[e("p",[a._v("相对于 "),e("code",[a._v("HashSet")]),a._v(" 主要是在迭代时是按照插入顺序")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class LinkedHashSet<E>\n    extends HashSet<E>\n    implements Set<E>, Cloneable, java.io.Serializable \n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("h3",{attrs:{id:"concurrentskiplistset-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concurrentskiplistset-线程安全"}},[a._v("#")]),a._v(" ConcurrentSkipListSet(线程安全)")]),a._v(" "),e("blockquote",[e("p",[a._v("封装 "),e("code",[a._v("ConcurrentSkipListMap")])])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class ConcurrentSkipListSet<E>\n    extends AbstractSet<E>\n    implements NavigableSet<E>, Cloneable, java.io.Serializable\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("h3",{attrs:{id:"copyonwritearrayset-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#copyonwritearrayset-线程安全"}},[a._v("#")]),a._v(" CopyOnWriteArraySet(线程安全)")]),a._v(" "),e("blockquote",[e("p",[a._v("与其他的set最大的区别是封装 "),e("code",[a._v("CopyOnWriteArrayList")]),a._v("，而其他set都是封装的 map。")]),a._v(" "),e("p",[a._v("主要是调用")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class CopyOnWriteArraySet<E> extends AbstractSet<E>\n        implements java.io.Serializable\n        \n    // 核心方法，就是掉用 CopyOnWriteArrayList 的 addIfAbsent\n    public boolean add(E e) {\n        return al.addIfAbsent(e);\n    }\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br")])]),e("h2",{attrs:{id:"qeque"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#qeque"}},[a._v("#")]),a._v(" Qeque")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public interface Queue<E> extends Collection<E> \n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("h3",{attrs:{id:"priorityqueue"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#priorityqueue"}},[a._v("#")]),a._v(" PriorityQueue")]),a._v(" "),e("blockquote",[e("p",[a._v("基于优先堆的一个无界队列，这个优先队列中的元素可以默认自然排序或者通过提供的比较器在队列实例化的时排序。")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class PriorityQueue<E> extends AbstractQueue<E>\n    implements java.io.Serializable {\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("ul",[e("li",[a._v("插入数据不能为null，即不能排序")])]),a._v(" "),e("h3",{attrs:{id:"synchronousqueue-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#synchronousqueue-线程安全"}},[a._v("#")]),a._v(" SynchronousQueue（线程安全）")]),a._v(" "),e("blockquote",[e("p",[a._v("其内部是没有容器的，所以生产者生产一个数据，就堵塞了，必须等消费者消费后，生产者才能再次生产。")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class SynchronousQueue<E> extends AbstractQueue<E>\n    implements BlockingQueue<E>, java.io.Serializable {\n    \n    // 有公平，非公平\n     public SynchronousQueue(boolean fair)\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br")])]),e("h3",{attrs:{id:"linkedblockingqueue-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linkedblockingqueue-线程安全"}},[a._v("#")]),a._v(" LinkedBlockingQueue（线程安全）")]),a._v(" "),e("blockquote",[e("p",[a._v("基于双向链表来实现阻塞队列。")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class LinkedBlockingQueue<E> extends AbstractQueue<E>\n        implements BlockingQueue<E>, java.io.Serializable {\n        \n        \n        \n   /** 最大容量, 没有设置则为 Integer.MAX_VALUE*/\n    private final int capacity;\n\n    /** 当前元素数量 */\n    private final AtomicInteger count = new AtomicInteger();\n\n\t\t// 双端队列头元素\n    transient Node<E> head;\n\n    // 双端队列队尾元素\n    private transient Node<E> last;\n\n    /** 出队使用的锁 take, poll, etc */\n    private final ReentrantLock takeLock = new ReentrantLock();\n\n    /** 出队等待队列 */\n    private final Condition notEmpty = takeLock.newCondition();\n\n    /** 入队使用的锁 put, offer, etc */\n    private final ReentrantLock putLock = new ReentrantLock();\n\n    /** 入队等待队列 */\n    private final Condition notFull = putLock.newCondition();\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br"),e("span",{staticClass:"line-number"},[a._v("22")]),e("br"),e("span",{staticClass:"line-number"},[a._v("23")]),e("br"),e("span",{staticClass:"line-number"},[a._v("24")]),e("br"),e("span",{staticClass:"line-number"},[a._v("25")]),e("br"),e("span",{staticClass:"line-number"},[a._v("26")]),e("br"),e("span",{staticClass:"line-number"},[a._v("27")]),e("br"),e("span",{staticClass:"line-number"},[a._v("28")]),e("br")])]),e("ul",[e("li",[a._v("大小可以初始化设置，如果不设置，默认设置大小为Integer.MAX_VALUE")]),a._v(" "),e("li",[a._v("有两个锁对象，可以并行处理")]),a._v(" "),e("li",[a._v("因为有两把锁，所以不能选择公平锁")])]),a._v(" "),e("h3",{attrs:{id:"arrayblockingqueue-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#arrayblockingqueue-线程安全"}},[a._v("#")]),a._v(" ArrayBlockingQueue（线程安全）")]),a._v(" "),e("blockquote",[e("p",[a._v("底层以数组的形式保存数据(实际上可看作一个循环数组)。")])]),a._v(" "),e("ul",[e("li",[a._v("初始化时设置数组长度")]),a._v(" "),e("li",[a._v("是一个有界队列")]),a._v(" "),e("li",[a._v("只有一个锁对象")]),a._v(" "),e("li",[a._v("可以选择公平锁")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class ArrayBlockingQueue<E> extends AbstractQueue<E>\n        implements BlockingQueue<E>, java.io.Serializable {\n        \n   /** 存放元素 */\n    final Object[] items;\n\n    /**下一次操作位置，即队列最前面元素 take, poll, peek，remove */\n    int takeIndex;\n\n    /** 下一次添加位置 put, offer, add */\n    int putIndex;\n\n    /** 当前数量 */\n    int count;\n\n    /** 所有操作使用的锁 */\n    final ReentrantLock lock;\n\n    /** 出队等待队列 */\n    private final Condition notEmpty;\n\n    /** 入队等待队列 */\n    private final Condition notFull;\n    \n    // 可选择公平锁\n    public ArrayBlockingQueue(int capacity, boolean fair) \n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br"),e("span",{staticClass:"line-number"},[a._v("7")]),e("br"),e("span",{staticClass:"line-number"},[a._v("8")]),e("br"),e("span",{staticClass:"line-number"},[a._v("9")]),e("br"),e("span",{staticClass:"line-number"},[a._v("10")]),e("br"),e("span",{staticClass:"line-number"},[a._v("11")]),e("br"),e("span",{staticClass:"line-number"},[a._v("12")]),e("br"),e("span",{staticClass:"line-number"},[a._v("13")]),e("br"),e("span",{staticClass:"line-number"},[a._v("14")]),e("br"),e("span",{staticClass:"line-number"},[a._v("15")]),e("br"),e("span",{staticClass:"line-number"},[a._v("16")]),e("br"),e("span",{staticClass:"line-number"},[a._v("17")]),e("br"),e("span",{staticClass:"line-number"},[a._v("18")]),e("br"),e("span",{staticClass:"line-number"},[a._v("19")]),e("br"),e("span",{staticClass:"line-number"},[a._v("20")]),e("br"),e("span",{staticClass:"line-number"},[a._v("21")]),e("br"),e("span",{staticClass:"line-number"},[a._v("22")]),e("br"),e("span",{staticClass:"line-number"},[a._v("23")]),e("br"),e("span",{staticClass:"line-number"},[a._v("24")]),e("br"),e("span",{staticClass:"line-number"},[a._v("25")]),e("br"),e("span",{staticClass:"line-number"},[a._v("26")]),e("br")])]),e("h3",{attrs:{id:"linkedtransferqueue-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linkedtransferqueue-线程安全"}},[a._v("#")]),a._v(" LinkedTransferQueue（线程安全）")]),a._v(" "),e("blockquote",[e("p",[e("code",[a._v("LinkedTransferQueue")]),a._v("是 "),e("code",[a._v("SynchronousQueue")]),a._v(" 和 "),e("code",[a._v("LinkedBlockingQueue")]),a._v(" 的合体，性能比 "),e("code",[a._v("LinkedBlockingQueue")]),a._v(" 更高（没有锁操作），比 "),e("code",[a._v("SynchronousQueue")]),a._v("能存储更多的元素。")]),a._v(" "),e("p",[a._v("当 "),e("code",[a._v("put")]),a._v(" 时，如果有等待的线程，就直接将元素 “交给” 等待者， 否则直接进入队列。")]),a._v(" "),e("p",[e("code",[a._v("put")]),a._v("和 "),e("code",[a._v("transfer")]),a._v(" 方法的区别是，put 是立即返回的， transfer 是阻塞等待消费者拿到数据才返回。"),e("code",[a._v("transfer")]),a._v("方法和 "),e("code",[a._v("SynchronousQueue")]),a._v("的 put 方法类似。")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class LinkedTransferQueue<E> extends AbstractQueue<E>\n    implements TransferQueue<E>, java.io.Serializable {\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("h3",{attrs:{id:"priorityblockingqueue-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#priorityblockingqueue-线程安全"}},[a._v("#")]),a._v(" PriorityBlockingQueue（线程安全）")]),a._v(" "),e("ul",[e("li",[a._v("基于优先级的一个无界队列")]),a._v(" "),e("li",[a._v("底层是基于数组存储元素的")]),a._v(" "),e("li",[a._v("元素按照优选级顺序存储，优先级是通过Comparable的compareTo方法来实现的（自然排序）")]),a._v(" "),e("li",[a._v("其只会堵塞消费者，不会堵塞生产者，数组会不断扩容，使用时要谨慎。")]),a._v(" "),e("li",[a._v("使用 "),e("code",[a._v("contains")]),a._v(" "),e("code",[a._v("remove")]),a._v("方法需要遍历所有值。")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class PriorityBlockingQueue<E> extends AbstractQueue<E>\n    implements BlockingQueue<E>, java.io.Serializable {\n    \n    // 扩容\n    // 实际只有一个线程会进行实际扩容，其他线程一直等，但不影响出队操作\n     private void tryGrow(Object[] array, int oldCap) \n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br"),e("span",{staticClass:"line-number"},[a._v("4")]),e("br"),e("span",{staticClass:"line-number"},[a._v("5")]),e("br"),e("span",{staticClass:"line-number"},[a._v("6")]),e("br")])]),e("h3",{attrs:{id:"delayqueue-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#delayqueue-线程安全"}},[a._v("#")]),a._v(" DelayQueue（线程安全）")]),a._v(" "),e("ul",[e("li",[a._v("基于优先级的一个无界队列")]),a._v(" "),e("li",[a._v("队列元素必须实现Delayed接口")]),a._v(" "),e("li",[a._v("支持延迟获取")]),a._v(" "),e("li",[a._v("元素按照时间排序")]),a._v(" "),e("li",[a._v("只有元素到期后，消费者才能从队列中取出")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class DelayQueue<E extends Delayed> extends AbstractQueue<E>\n    implements BlockingQueue<E> {\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("h3",{attrs:{id:"concurrentlinkedqueue-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concurrentlinkedqueue-线程安全"}},[a._v("#")]),a._v(" ConcurrentLinkedQueue（线程安全）")]),a._v(" "),e("blockquote",[e("p",[a._v("基于链接节点的无界线程安全的队列，使用cas保证线程安全")])]),a._v(" "),e("ul",[e("li",[a._v("不允许null入列")]),a._v(" "),e("li",[a._v("删除节点是将item设置为null, 队列迭代时跳过item为null节点")]),a._v(" "),e("li",[a._v("head节点跟tail不一定指向头节点或尾节点，可能存在滞后性")]),a._v(" "),e("li",[a._v("入列出列线程安全，遍历不安全")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class ConcurrentLinkedQueue<E> extends AbstractQueue<E>\n        implements Queue<E>, java.io.Serializable {\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("h2",{attrs:{id:"deque"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deque"}},[a._v("#")]),a._v(" Deque")]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public interface Deque<E> extends Queue<E>\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br")])]),e("h3",{attrs:{id:"arraydeque"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#arraydeque"}},[a._v("#")]),a._v(" ArrayDeque")]),a._v(" "),e("blockquote",[e("p",[a._v("通过循环数组来实现队列。")])]),a._v(" "),e("ul",[e("li",[a._v("不能添加null值")]),a._v(" "),e("li",[a._v("每次扩容都是2的n次方")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class ArrayDeque<E> extends AbstractCollection<E>\n                           implements Deque<E>, Cloneable, Serializable\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br")])]),e("h3",{attrs:{id:"concurrentlinkeddeque-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concurrentlinkeddeque-线程安全"}},[a._v("#")]),a._v(" ConcurrentLinkedDeque（线程安全）")]),a._v(" "),e("blockquote",[e("p",[a._v("与 "),e("code",[a._v("ConcurrentLinkedQueue")]),a._v(" 的区别是该阻塞队列同时支持FIFO和FILO两种操作方式")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class ConcurrentLinkedDeque<E>\n    extends AbstractCollection<E>\n    implements Deque<E>, java.io.Serializable {\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])]),e("h3",{attrs:{id:"linkedblockingdeque-线程安全"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linkedblockingdeque-线程安全"}},[a._v("#")]),a._v(" LinkedBlockingDeque（线程安全）")]),a._v(" "),e("blockquote",[e("p",[a._v("与 "),e("code",[a._v("LinkedBlockingQueue")]),a._v("的区别是该阻塞队列同时支持FIFO和FILO两种操作方式")])]),a._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("public class LinkedBlockingDeque<E>\n    extends AbstractQueue<E>\n    implements BlockingDeque<E>, java.io.Serializable {\n")])]),a._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[a._v("1")]),e("br"),e("span",{staticClass:"line-number"},[a._v("2")]),e("br"),e("span",{staticClass:"line-number"},[a._v("3")]),e("br")])])])}),[],!1,null,null,null);s.default=t.exports}}]);